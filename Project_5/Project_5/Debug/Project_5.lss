
Project_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000145a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  0000145a  000014ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800182  00800182  00001610  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a5  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b0  00000000  00000000  00002c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000574  00000000  00000000  00003015  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  00003990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001048  00000000  00000000  00003d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004d95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 06 	call	0xd66	; 0xd66 <main>
      8a:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
      92:	66 23       	and	r22, r22
      94:	11 f0       	breq	.+4      	; 0x9a <output+0x8>
      96:	c0 9a       	sbi	0x18, 0	; 24
      98:	01 c0       	rjmp	.+2      	; 0x9c <output+0xa>
      9a:	c0 98       	cbi	0x18, 0	; 24
	CLR_BIT(PORT, RW_PIN);
      9c:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
	PORTD = x;
      9e:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff;
      a0:	8f ef       	ldi	r24, 0xFF	; 255
      a2:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	CLR_BIT(PORT, RW_PIN);
	set_data(d);
	SET_BIT(PORT, EN_PIN);
      a4:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
	NOP();
      a6:	00 00       	nop
	NOP();
      a8:	00 00       	nop
	NOP();
      aa:	00 00       	nop
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	CLR_BIT(PORT, RW_PIN);
	set_data(d);
	SET_BIT(PORT, EN_PIN);
	sleep_700ns();
	CLR_BIT(PORT, EN_PIN);
      ac:	c2 98       	cbi	0x18, 2	; 24
      ae:	08 95       	ret

000000b0 <write>:

static unsigned char
input(unsigned char rs)
{
	unsigned char d;
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
      b0:	c0 98       	cbi	0x18, 0	; 24
	SET_BIT(PORT, RW_PIN);
      b2:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
	DDRD = 0x00;
      b4:	11 ba       	out	0x11, r1	; 17
	return PIND;
      b6:	90 b3       	in	r25, 0x10	; 16
{
	unsigned char d;
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	SET_BIT(PORT, RW_PIN);
	get_data();
	SET_BIT(PORT, EN_PIN);
      b8:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
	NOP();
      ba:	00 00       	nop
	NOP();
      bc:	00 00       	nop
	NOP();
      be:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
	DDRD = 0x00;
      c0:	11 ba       	out	0x11, r1	; 17
	return PIND;
      c2:	90 b3       	in	r25, 0x10	; 16
	SET_BIT(PORT, RW_PIN);
	get_data();
	SET_BIT(PORT, EN_PIN);
	sleep_700ns();
	d = get_data();
	CLR_BIT(PORT, EN_PIN);
      c4:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
	while (input(0) & 0x80);
      c6:	99 23       	and	r25, r25
      c8:	9c f3       	brlt	.-26     	; 0xb0 <write>
	output(c, rs);
      ca:	0e 94 49 00 	call	0x92	; 0x92 <output>
      ce:	08 95       	ret

000000d0 <clr_lcd>:
}

void
clr_lcd(void)
{
	write(0x01, 0);
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
      d8:	08 95       	ret

000000da <pos_lcd>:
}

void
pos_lcd(unsigned char r, unsigned char c)
{
      da:	cf 93       	push	r28
	unsigned char n = r * 40 + c;
      dc:	c6 2f       	mov	r28, r22
      de:	98 e2       	ldi	r25, 0x28	; 40
      e0:	89 9f       	mul	r24, r25
      e2:	c0 0d       	add	r28, r0
      e4:	11 24       	eor	r1, r1
	write(0x02, 0);
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
	while (n--) {
      ee:	cc 23       	and	r28, r28
      f0:	31 f0       	breq	.+12     	; 0xfe <pos_lcd+0x24>
		write(0x14, 0);
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	84 e1       	ldi	r24, 0x14	; 20
      f6:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
      fa:	c1 50       	subi	r28, 0x01	; 1
void
pos_lcd(unsigned char r, unsigned char c)
{
	unsigned char n = r * 40 + c;
	write(0x02, 0);
	while (n--) {
      fc:	d1 f7       	brne	.-12     	; 0xf2 <pos_lcd+0x18>
		write(0x14, 0);
	}
}
      fe:	cf 91       	pop	r28
     100:	08 95       	ret

00000102 <put_lcd>:

void
put_lcd(char c)
{
	write(c, 1);
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
     108:	08 95       	ret

0000010a <puts_lcd2>:
	}
}

void
puts_lcd2(const char *s)
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
     10e:	ec 01       	movw	r28, r24
     110:	21 96       	adiw	r28, 0x01	; 1
     112:	fc 01       	movw	r30, r24
     114:	80 81       	ld	r24, Z
     116:	88 23       	and	r24, r24
     118:	31 f0       	breq	.+12     	; 0x126 <puts_lcd2+0x1c>
		write(c, 1);
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	0e 94 58 00 	call	0xb0	; 0xb0 <write>

void
puts_lcd2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
     120:	89 91       	ld	r24, Y+
     122:	81 11       	cpse	r24, r1
     124:	fa cf       	rjmp	.-12     	; 0x11a <puts_lcd2+0x10>
		write(c, 1);
	}
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	08 95       	ret

0000012c <get_value>:
#include "avr.h"


char get_value(unsigned char key)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	60 97       	sbiw	r28, 0x10	; 16
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
	int index = (int) key;
     140:	90 e0       	ldi	r25, 0x00	; 0
	
	if(index < 15)
     142:	8f 30       	cpi	r24, 0x0F	; 15
     144:	91 05       	cpc	r25, r1
     146:	8c f4       	brge	.+34     	; 0x16a <get_value+0x3e>
	{
		const char keypad[16] = {
     148:	20 e1       	ldi	r18, 0x10	; 16
     14a:	e6 e9       	ldi	r30, 0x96	; 150
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	de 01       	movw	r26, r28
     150:	11 96       	adiw	r26, 0x01	; 1
     152:	01 90       	ld	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	2a 95       	dec	r18
     158:	e1 f7       	brne	.-8      	; 0x152 <get_value+0x26>
			'7','8','9','C',
			'*','0','#','D'};
	
		int index = (int) key;
	
		return keypad[index];		
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	ec 0f       	add	r30, r28
     160:	fd 1f       	adc	r31, r29
     162:	e8 0f       	add	r30, r24
     164:	f9 1f       	adc	r31, r25
     166:	80 81       	ld	r24, Z
     168:	01 c0       	rjmp	.+2      	; 0x16c <get_value+0x40>
	}
	
	else
	{
		return 0xff;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     16c:	60 96       	adiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <wait_avr>:
	WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
     17e:	9c 01       	movw	r18, r24
	TCCR0 = 3;
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
     184:	83 e8       	ldi	r24, 0x83	; 131

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
     186:	08 c0       	rjmp	.+16     	; 0x198 <wait_avr+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
     188:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
     18a:	98 b7       	in	r25, 0x38	; 56
     18c:	91 60       	ori	r25, 0x01	; 1
     18e:	98 bf       	out	0x38, r25	; 56
		WDR();
     190:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
     192:	08 b6       	in	r0, 0x38	; 56
     194:	00 fe       	sbrs	r0, 0
     196:	fd cf       	rjmp	.-6      	; 0x192 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
     198:	21 50       	subi	r18, 0x01	; 1
     19a:	31 09       	sbc	r19, r1
     19c:	a8 f7       	brcc	.-22     	; 0x188 <wait_avr+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
     19e:	13 be       	out	0x33, r1	; 51
     1a0:	08 95       	ret

000001a2 <ini_lcd>:
}

void
ini_lcd(void)
{
	SET_BIT(DDR, RS_PIN);
     1a2:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(DDR, RW_PIN);
     1a4:	b9 9a       	sbi	0x17, 1	; 23
	SET_BIT(DDR, EN_PIN);
     1a6:	ba 9a       	sbi	0x17, 2	; 23
	wait_avr(16);
     1a8:	80 e1       	ldi	r24, 0x10	; 16
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	output(0x30, 0);
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	80 e3       	ldi	r24, 0x30	; 48
     1b4:	0e 94 49 00 	call	0x92	; 0x92 <output>
	wait_avr(5);
     1b8:	85 e0       	ldi	r24, 0x05	; 5
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	output(0x30, 0);
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	80 e3       	ldi	r24, 0x30	; 48
     1c4:	0e 94 49 00 	call	0x92	; 0x92 <output>
	wait_avr(1);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	write(0x3c, 0);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	8c e3       	ldi	r24, 0x3C	; 60
     1d4:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
	write(0x0c, 0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	8c e0       	ldi	r24, 0x0C	; 12
     1dc:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
	write(0x06, 0);
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	86 e0       	ldi	r24, 0x06	; 6
     1e4:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
	write(0x01, 0);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
     1f0:	08 95       	ret

000001f2 <pressed>:
	
	return  0xff;
}

unsigned char pressed(unsigned r, unsigned c)
{
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	eb 01       	movw	r28, r22
	DDRC = 0x0f;
     1f8:	9f e0       	ldi	r25, 0x0F	; 15
     1fa:	94 bb       	out	0x14, r25	; 20
	PORTC = 0xff;
     1fc:	9f ef       	ldi	r25, 0xFF	; 255
     1fe:	95 bb       	out	0x15, r25	; 21
	
	CLR_BIT(PORTC,r);
     200:	95 b3       	in	r25, 0x15	; 21
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <pressed+0x1a>
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	8a 95       	dec	r24
     20e:	e2 f7       	brpl	.-8      	; 0x208 <pressed+0x16>
     210:	20 95       	com	r18
     212:	29 23       	and	r18, r25
     214:	25 bb       	out	0x15, r18	; 21
	
	wait_avr(1);
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	
	if(!GET_BIT(PINC,c+4))
     21e:	83 b3       	in	r24, 0x13	; 19
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	24 96       	adiw	r28, 0x04	; 4
     224:	02 c0       	rjmp	.+4      	; 0x22a <pressed+0x38>
     226:	95 95       	asr	r25
     228:	87 95       	ror	r24
     22a:	ca 95       	dec	r28
     22c:	e2 f7       	brpl	.-8      	; 0x226 <pressed+0x34>
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	82 27       	eor	r24, r18
		return 1;
	}
	
	return 0;
	
     232:	81 70       	andi	r24, 0x01	; 1
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <get_key>:
	}
}


unsigned char get_key()
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	c1 2c       	mov	r12, r1
     250:	d1 2c       	mov	r13, r1
     252:	14 c0       	rjmp	.+40     	; 0x27c <get_key+0x42>
	for(r = 0; r < 4; r++)
	{
		for(c=0; c < 4; ++c)
		{
			
			if(pressed(r,c))
     254:	be 01       	movw	r22, r28
     256:	c8 01       	movw	r24, r16
     258:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <pressed>
     25c:	88 23       	and	r24, r24
     25e:	29 f0       	breq	.+10     	; 0x26a <get_key+0x30>
			{
				
				return r * 4 + c;
     260:	8e 2d       	mov	r24, r14
     262:	88 0f       	add	r24, r24
     264:	88 0f       	add	r24, r24
     266:	8c 0f       	add	r24, r28
     268:	0e c0       	rjmp	.+28     	; 0x286 <get_key+0x4c>
     26a:	21 96       	adiw	r28, 0x01	; 1
{
	unsigned char r,c;
	
	for(r = 0; r < 4; r++)
	{
		for(c=0; c < 4; ++c)
     26c:	c4 30       	cpi	r28, 0x04	; 4
     26e:	d1 05       	cpc	r29, r1
     270:	89 f7       	brne	.-30     	; 0x254 <get_key+0x1a>
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255

unsigned char get_key()
{
	unsigned char r,c;
	
	for(r = 0; r < 4; r++)
     276:	04 30       	cpi	r16, 0x04	; 4
     278:	11 05       	cpc	r17, r1
     27a:	21 f0       	breq	.+8      	; 0x284 <get_key+0x4a>
     27c:	e0 2e       	mov	r14, r16
	}
}


unsigned char get_key()
{
     27e:	cc 2d       	mov	r28, r12
     280:	dd 2d       	mov	r29, r13
     282:	e8 cf       	rjmp	.-48     	; 0x254 <get_key+0x1a>
			}
		}
		
	}	
	
	return  0xff;
     284:	8f ef       	ldi	r24, 0xFF	; 255
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	08 95       	ret

00000298 <wait_avr_sound>:
#define G 64


void
wait_avr_sound(unsigned short msec)
{
     298:	9c 01       	movw	r18, r24
	TCCR0 = 2;
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);  
     29e:	86 ef       	ldi	r24, 0xF6	; 246

void
wait_avr_sound(unsigned short msec)
{
	TCCR0 = 2;
	while (msec--) {
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <wait_avr_sound+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);  
     2a2:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
     2a4:	98 b7       	in	r25, 0x38	; 56
     2a6:	91 60       	ori	r25, 0x01	; 1
     2a8:	98 bf       	out	0x38, r25	; 56
		WDR();
     2aa:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
     2ac:	08 b6       	in	r0, 0x38	; 56
     2ae:	00 fe       	sbrs	r0, 0
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <wait_avr_sound+0x14>

void
wait_avr_sound(unsigned short msec)
{
	TCCR0 = 2;
	while (msec--) {
     2b2:	21 50       	subi	r18, 0x01	; 1
     2b4:	31 09       	sbc	r19, r1
     2b6:	a8 f7       	brcc	.-22     	; 0x2a2 <wait_avr_sound+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 8) * 0.00001);  
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
     2b8:	13 be       	out	0x33, r1	; 51
     2ba:	08 95       	ret

000002bc <play_note>:
}


void 
play_note(unsigned short freq, unsigned short duration) {
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
	
	SET_BIT(DDRB, 3);
     2c8:	bb 9a       	sbi	0x17, 3	; 23
	
	int i;
	for(i = 0; i < duration; i++ )
     2ca:	61 15       	cp	r22, r1
     2cc:	71 05       	cpc	r23, r1
     2ce:	81 f0       	breq	.+32     	; 0x2f0 <play_note+0x34>
     2d0:	8c 01       	movw	r16, r24
     2d2:	7b 01       	movw	r14, r22
     2d4:	c0 e0       	ldi	r28, 0x00	; 0
     2d6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SET_BIT(PORTB,3);
     2d8:	c3 9a       	sbi	0x18, 3	; 24
		wait_avr_sound(freq);
     2da:	c8 01       	movw	r24, r16
     2dc:	0e 94 4c 01 	call	0x298	; 0x298 <wait_avr_sound>
		CLR_BIT(PORTB,3);
     2e0:	c3 98       	cbi	0x18, 3	; 24
		wait_avr_sound(freq);
     2e2:	c8 01       	movw	r24, r16
     2e4:	0e 94 4c 01 	call	0x298	; 0x298 <wait_avr_sound>
play_note(unsigned short freq, unsigned short duration) {
	
	SET_BIT(DDRB, 3);
	
	int i;
	for(i = 0; i < duration; i++ )
     2e8:	21 96       	adiw	r28, 0x01	; 1
     2ea:	ce 15       	cp	r28, r14
     2ec:	df 05       	cpc	r29, r15
     2ee:	a1 f7       	brne	.-24     	; 0x2d8 <play_note+0x1c>
		wait_avr_sound(freq);
		CLR_BIT(PORTB,3);
		wait_avr_sound(freq);
		
	}
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	08 95       	ret

000002fe <alarm_status>:
{
	alarm_snooze = 1;
}

void alarm_status()
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	a8 97       	sbiw	r28, 0x28	; 40
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
	char buffer[40];
	if(!alarm_set)
     316:	80 91 8a 01 	lds	r24, 0x018A
     31a:	90 91 8b 01 	lds	r25, 0x018B
     31e:	89 2b       	or	r24, r25
     320:	91 f4       	brne	.+36     	; 0x346 <alarm_status+0x48>
	{
		pos_lcd(1,0);
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		strcpy(buffer,"Alarm Not Set");
     32a:	8e e0       	ldi	r24, 0x0E	; 14
     32c:	e6 ea       	ldi	r30, 0xA6	; 166
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	de 01       	movw	r26, r28
     332:	11 96       	adiw	r26, 0x01	; 1
     334:	01 90       	ld	r0, Z+
     336:	0d 92       	st	X+, r0
     338:	8a 95       	dec	r24
     33a:	e1 f7       	brne	.-8      	; 0x334 <alarm_status+0x36>
		puts_lcd2(buffer);
     33c:	ce 01       	movw	r24, r28
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
     344:	29 c0       	rjmp	.+82     	; 0x398 <alarm_status+0x9a>
	}
	
	else
	{
		pos_lcd(1,0);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		sprintf(buffer, "Alarm: %02d:%02d:%02d", alarm_hours, alarm_minutes, alarm_seconds);	
     34e:	40 91 60 00 	lds	r20, 0x0060
     352:	50 91 61 00 	lds	r21, 0x0061
     356:	20 91 62 00 	lds	r18, 0x0062
     35a:	30 91 63 00 	lds	r19, 0x0063
     35e:	80 91 64 00 	lds	r24, 0x0064
     362:	90 91 65 00 	lds	r25, 0x0065
     366:	5f 93       	push	r21
     368:	4f 93       	push	r20
     36a:	3f 93       	push	r19
     36c:	2f 93       	push	r18
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	84 eb       	ldi	r24, 0xB4	; 180
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9f 93       	push	r25
     378:	8f 93       	push	r24
     37a:	8e 01       	movw	r16, r28
     37c:	0f 5f       	subi	r16, 0xFF	; 255
     37e:	1f 4f       	sbci	r17, 0xFF	; 255
     380:	1f 93       	push	r17
     382:	0f 93       	push	r16
     384:	0e 94 53 07 	call	0xea6	; 0xea6 <sprintf>
		puts_lcd2(buffer);
     388:	c8 01       	movw	r24, r16
     38a:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
     396:	cd bf       	out	0x3d, r28	; 61
	}
}
     398:	a8 96       	adiw	r28, 0x28	; 40
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <clock_status>:

void clock_status()
{
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	a8 97       	sbiw	r28, 0x28	; 40
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
	pos_lcd(0,0);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	char clock[40];
	sprintf(clock, "Time: %02d:%02d:%02d", hours, miniutes, seconds);
     3ce:	40 91 8c 01 	lds	r20, 0x018C
     3d2:	50 91 8d 01 	lds	r21, 0x018D
     3d6:	20 91 8e 01 	lds	r18, 0x018E
     3da:	30 91 8f 01 	lds	r19, 0x018F
     3de:	80 91 90 01 	lds	r24, 0x0190
     3e2:	90 91 91 01 	lds	r25, 0x0191
     3e6:	5f 93       	push	r21
     3e8:	4f 93       	push	r20
     3ea:	3f 93       	push	r19
     3ec:	2f 93       	push	r18
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	8a ec       	ldi	r24, 0xCA	; 202
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	8e 01       	movw	r16, r28
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
     400:	1f 93       	push	r17
     402:	0f 93       	push	r16
     404:	0e 94 53 07 	call	0xea6	; 0xea6 <sprintf>
	puts_lcd2(clock);
     408:	c8 01       	movw	r24, r16
     40a:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
}
     418:	a8 96       	adiw	r28, 0x28	; 40
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <led_display>:


void led_display()
{
	
	if(seconds > 0 && seconds <= 9 )
     42e:	80 91 8c 01 	lds	r24, 0x018C
     432:	90 91 8d 01 	lds	r25, 0x018D
     436:	89 2b       	or	r24, r25
     438:	41 f0       	breq	.+16     	; 0x44a <led_display+0x1c>
     43a:	80 91 8c 01 	lds	r24, 0x018C
     43e:	90 91 8d 01 	lds	r25, 0x018D
     442:	0a 97       	sbiw	r24, 0x0a	; 10
     444:	10 f4       	brcc	.+4      	; 0x44a <led_display+0x1c>
	{
		SET_BIT(PORTA,0);
     446:	d8 9a       	sbi	0x1b, 0	; 27
     448:	0b c0       	rjmp	.+22     	; 0x460 <led_display+0x32>
	}
	
	else if(seconds == 0)
     44a:	80 91 8c 01 	lds	r24, 0x018C
     44e:	90 91 8d 01 	lds	r25, 0x018D
     452:	89 2b       	or	r24, r25
     454:	19 f4       	brne	.+6      	; 0x45c <led_display+0x2e>
	{
		CLR_BIT(PORTA,0);
     456:	d8 98       	cbi	0x1b, 0	; 27
		CLR_BIT(PORTA,1);
     458:	d9 98       	cbi	0x1b, 1	; 27
     45a:	02 c0       	rjmp	.+4      	; 0x460 <led_display+0x32>
	}
	
	else
	{
		SET_BIT(PORTA,0);
     45c:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(PORTA,1);
     45e:	d9 9a       	sbi	0x1b, 1	; 27

	}
	
	if(miniutes > 0 && miniutes <= 9 )
     460:	80 91 8e 01 	lds	r24, 0x018E
     464:	90 91 8f 01 	lds	r25, 0x018F
     468:	89 2b       	or	r24, r25
     46a:	41 f0       	breq	.+16     	; 0x47c <led_display+0x4e>
     46c:	80 91 8e 01 	lds	r24, 0x018E
     470:	90 91 8f 01 	lds	r25, 0x018F
     474:	0a 97       	sbiw	r24, 0x0a	; 10
     476:	10 f4       	brcc	.+4      	; 0x47c <led_display+0x4e>
	{
		SET_BIT(PORTA,2);
     478:	da 9a       	sbi	0x1b, 2	; 27
     47a:	0b c0       	rjmp	.+22     	; 0x492 <led_display+0x64>
	}
	else if(miniutes == 0)
     47c:	80 91 8e 01 	lds	r24, 0x018E
     480:	90 91 8f 01 	lds	r25, 0x018F
     484:	89 2b       	or	r24, r25
     486:	19 f4       	brne	.+6      	; 0x48e <led_display+0x60>
	{
		CLR_BIT(PORTA,2);
     488:	da 98       	cbi	0x1b, 2	; 27
		CLR_BIT(PORTA,3);
     48a:	db 98       	cbi	0x1b, 3	; 27
     48c:	02 c0       	rjmp	.+4      	; 0x492 <led_display+0x64>
	}		
	else
	{
		SET_BIT(PORTA,2);
     48e:	da 9a       	sbi	0x1b, 2	; 27
		SET_BIT(PORTA,3);
     490:	db 9a       	sbi	0x1b, 3	; 27
		
	}

	if(hours > 0 && hours <= 9 )
     492:	80 91 90 01 	lds	r24, 0x0190
     496:	90 91 91 01 	lds	r25, 0x0191
     49a:	89 2b       	or	r24, r25
     49c:	41 f0       	breq	.+16     	; 0x4ae <led_display+0x80>
     49e:	80 91 90 01 	lds	r24, 0x0190
     4a2:	90 91 91 01 	lds	r25, 0x0191
     4a6:	0a 97       	sbiw	r24, 0x0a	; 10
     4a8:	10 f4       	brcc	.+4      	; 0x4ae <led_display+0x80>
	{
		SET_BIT(PORTA,4);
     4aa:	dc 9a       	sbi	0x1b, 4	; 27
     4ac:	08 95       	ret
	}

	else if(hours == 0)
     4ae:	80 91 90 01 	lds	r24, 0x0190
     4b2:	90 91 91 01 	lds	r25, 0x0191
     4b6:	89 2b       	or	r24, r25
     4b8:	19 f4       	brne	.+6      	; 0x4c0 <led_display+0x92>
	{
		CLR_BIT(PORTA,4);
     4ba:	dc 98       	cbi	0x1b, 4	; 27
		CLR_BIT(PORTA,5);
     4bc:	dd 98       	cbi	0x1b, 5	; 27
     4be:	08 95       	ret
	}
	
	else
	{
		SET_BIT(PORTA,4);
     4c0:	dc 9a       	sbi	0x1b, 4	; 27
		SET_BIT(PORTA,5);
     4c2:	dd 9a       	sbi	0x1b, 5	; 27
     4c4:	08 95       	ret

000004c6 <blink_led>:

}

void blink_led()
{
	PORTA = 0x00;
     4c6:	1b ba       	out	0x1b, r1	; 27
	wait_avr(250);
     4c8:	8a ef       	ldi	r24, 0xFA	; 250
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	PORTA = 0xff;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	8b bb       	out	0x1b, r24	; 27
	wait_avr(250);	
     4d4:	8a ef       	ldi	r24, 0xFA	; 250
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	PORTA = 0x00;	
     4dc:	1b ba       	out	0x1b, r1	; 27
     4de:	08 95       	ret

000004e0 <play_music>:

void
play_music(Note song[], int length)
{
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
	CLR_BIT(DDRB,4); //SET BUTTON FOR INPUT
     4ec:	bc 98       	cbi	0x17, 4	; 23
	
	int i;
	for (i = 0; i < length; i++)
     4ee:	16 16       	cp	r1, r22
     4f0:	17 06       	cpc	r1, r23
     4f2:	24 f5       	brge	.+72     	; 0x53c <play_music+0x5c>
	{
		
		if (bit_is_clear(PINB, 4))
     4f4:	b4 99       	sbic	0x16, 4	; 22
     4f6:	0c c0       	rjmp	.+24     	; 0x510 <play_music+0x30>
     4f8:	03 c0       	rjmp	.+6      	; 0x500 <play_music+0x20>
     4fa:	24 96       	adiw	r28, 0x04	; 4
     4fc:	b4 99       	sbic	0x16, 4	; 22
     4fe:	0d c0       	rjmp	.+26     	; 0x51a <play_music+0x3a>



void snooze()
{
	alarm_snooze = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 87 01 	sts	0x0187, r25
     508:	80 93 86 01 	sts	0x0186, r24
		{
			snooze();
			PORTA = 0x00;
     50c:	1b ba       	out	0x1b, r1	; 27
			return;
     50e:	16 c0       	rjmp	.+44     	; 0x53c <play_music+0x5c>
     510:	7b 01       	movw	r14, r22
     512:	c8 2f       	mov	r28, r24
     514:	d9 2f       	mov	r29, r25
	
	int i;
	for (i = 0; i < length; i++)
	{
		
		if (bit_is_clear(PINB, 4))
     516:	00 e0       	ldi	r16, 0x00	; 0
     518:	10 e0       	ldi	r17, 0x00	; 0
				
		}
		
		else
		{
			blink_led();
     51a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <blink_led>
			play_note(song[i].freq, song[i].duration);
     51e:	6a 81       	ldd	r22, Y+2	; 0x02
     520:	7b 81       	ldd	r23, Y+3	; 0x03
     522:	88 81       	ld	r24, Y
     524:	99 81       	ldd	r25, Y+1	; 0x01
     526:	0e 94 5e 01 	call	0x2bc	; 0x2bc <play_note>
			wait_avr_sound(5000);	
     52a:	88 e8       	ldi	r24, 0x88	; 136
     52c:	93 e1       	ldi	r25, 0x13	; 19
     52e:	0e 94 4c 01 	call	0x298	; 0x298 <wait_avr_sound>
play_music(Note song[], int length)
{
	CLR_BIT(DDRB,4); //SET BUTTON FOR INPUT
	
	int i;
	for (i = 0; i < length; i++)
     532:	0f 5f       	subi	r16, 0xFF	; 255
     534:	1f 4f       	sbci	r17, 0xFF	; 255
     536:	0e 15       	cp	r16, r14
     538:	1f 05       	cpc	r17, r15
     53a:	f9 f6       	brne	.-66     	; 0x4fa <play_music+0x1a>
			wait_avr_sound(5000);	
		}
	
	}
	
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <check_alarm>:
}


void check_alarm()
{
	if((hours == alarm_hours) && (miniutes == alarm_minutes) & (seconds == alarm_seconds))
     54a:	20 91 90 01 	lds	r18, 0x0190
     54e:	30 91 91 01 	lds	r19, 0x0191
     552:	80 91 64 00 	lds	r24, 0x0064
     556:	90 91 65 00 	lds	r25, 0x0065
     55a:	28 17       	cp	r18, r24
     55c:	39 07       	cpc	r19, r25
     55e:	21 f5       	brne	.+72     	; 0x5a8 <check_alarm+0x5e>
     560:	e0 91 8e 01 	lds	r30, 0x018E
     564:	f0 91 8f 01 	lds	r31, 0x018F
     568:	60 91 62 00 	lds	r22, 0x0062
     56c:	70 91 63 00 	lds	r23, 0x0063
     570:	40 91 8c 01 	lds	r20, 0x018C
     574:	50 91 8d 01 	lds	r21, 0x018D
     578:	20 91 60 00 	lds	r18, 0x0060
     57c:	30 91 61 00 	lds	r19, 0x0061
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	42 17       	cp	r20, r18
     584:	53 07       	cpc	r21, r19
     586:	09 f0       	breq	.+2      	; 0x58a <check_alarm+0x40>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	88 23       	and	r24, r24
     58c:	69 f0       	breq	.+26     	; 0x5a8 <check_alarm+0x5e>
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	e6 17       	cp	r30, r22
     592:	f7 07       	cpc	r31, r23
     594:	09 f0       	breq	.+2      	; 0x598 <check_alarm+0x4e>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	88 23       	and	r24, r24
     59a:	31 f0       	breq	.+12     	; 0x5a8 <check_alarm+0x5e>
	{
		FLAG_ALARM = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	90 93 83 01 	sts	0x0183, r25
     5a4:	80 93 82 01 	sts	0x0182, r24
     5a8:	08 95       	ret

000005aa <alarm>:
	}
}

void alarm()
{
	while(alarm_snooze == 0)
     5aa:	80 91 86 01 	lds	r24, 0x0186
     5ae:	90 91 87 01 	lds	r25, 0x0187
     5b2:	89 2b       	or	r24, r25
     5b4:	61 f4       	brne	.+24     	; 0x5ce <alarm+0x24>
	{
		play_music(song1,SIZE);
     5b6:	6c e0       	ldi	r22, 0x0C	; 12
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	86 e6       	ldi	r24, 0x66	; 102
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 70 02 	call	0x4e0	; 0x4e0 <play_music>
	}
}

void alarm()
{
	while(alarm_snooze == 0)
     5c2:	80 91 86 01 	lds	r24, 0x0186
     5c6:	90 91 87 01 	lds	r25, 0x0187
     5ca:	89 2b       	or	r24, r25
     5cc:	a1 f3       	breq	.-24     	; 0x5b6 <alarm+0xc>
	{
		play_music(song1,SIZE);
	}
			
	alarm_snooze = 0;
     5ce:	10 92 87 01 	sts	0x0187, r1
     5d2:	10 92 86 01 	sts	0x0186, r1
     5d6:	08 95       	ret

000005d8 <time>:

void
time()
{
	
	if(seconds == 60)
     5d8:	80 91 8c 01 	lds	r24, 0x018C
     5dc:	90 91 8d 01 	lds	r25, 0x018D
     5e0:	cc 97       	sbiw	r24, 0x3c	; 60
     5e2:	59 f5       	brne	.+86     	; 0x63a <time+0x62>
	{
		if((seconds == 60)&&(miniutes == 59))
     5e4:	80 91 8c 01 	lds	r24, 0x018C
     5e8:	90 91 8d 01 	lds	r25, 0x018D
     5ec:	cc 97       	sbiw	r24, 0x3c	; 60
     5ee:	c1 f4       	brne	.+48     	; 0x620 <time+0x48>
     5f0:	80 91 8e 01 	lds	r24, 0x018E
     5f4:	90 91 8f 01 	lds	r25, 0x018F
     5f8:	cb 97       	sbiw	r24, 0x3b	; 59
     5fa:	91 f4       	brne	.+36     	; 0x620 <time+0x48>
		{			
			seconds = 0;
     5fc:	10 92 8d 01 	sts	0x018D, r1
     600:	10 92 8c 01 	sts	0x018C, r1
			miniutes = 0;
     604:	10 92 8f 01 	sts	0x018F, r1
     608:	10 92 8e 01 	sts	0x018E, r1
			hours++;
     60c:	80 91 90 01 	lds	r24, 0x0190
     610:	90 91 91 01 	lds	r25, 0x0191
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	90 93 91 01 	sts	0x0191, r25
     61a:	80 93 90 01 	sts	0x0190, r24
     61e:	0d c0       	rjmp	.+26     	; 0x63a <time+0x62>
		}
				
		else
		{
			seconds = 0;
     620:	10 92 8d 01 	sts	0x018D, r1
     624:	10 92 8c 01 	sts	0x018C, r1
			miniutes++;				
     628:	80 91 8e 01 	lds	r24, 0x018E
     62c:	90 91 8f 01 	lds	r25, 0x018F
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	90 93 8f 01 	sts	0x018F, r25
     636:	80 93 8e 01 	sts	0x018E, r24
		}				
	}
			
	if(hours > 23)
     63a:	80 91 90 01 	lds	r24, 0x0190
     63e:	90 91 91 01 	lds	r25, 0x0191
     642:	48 97       	sbiw	r24, 0x18	; 24
     644:	60 f0       	brcs	.+24     	; 0x65e <time+0x86>
	{
		seconds = 0;
     646:	10 92 8d 01 	sts	0x018D, r1
     64a:	10 92 8c 01 	sts	0x018C, r1
		miniutes = 0;
     64e:	10 92 8f 01 	sts	0x018F, r1
     652:	10 92 8e 01 	sts	0x018E, r1
		hours = 0;		
     656:	10 92 91 01 	sts	0x0191, r1
     65a:	10 92 90 01 	sts	0x0190, r1
	}
	
	
	if(!FLAG)
     65e:	80 91 84 01 	lds	r24, 0x0184
     662:	90 91 85 01 	lds	r25, 0x0185
     666:	89 2b       	or	r24, r25
     668:	11 f4       	brne	.+4      	; 0x66e <time+0x96>
	{	
		alarm_status();
     66a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <alarm_status>
	}
	
	clock_status();
     66e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <clock_status>
	check_alarm();
     672:	0e 94 a5 02 	call	0x54a	; 0x54a <check_alarm>
	led_display();
     676:	0e 94 17 02 	call	0x42e	; 0x42e <led_display>
	seconds++;
     67a:	80 91 8c 01 	lds	r24, 0x018C
     67e:	90 91 8d 01 	lds	r25, 0x018D
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	90 93 8d 01 	sts	0x018D, r25
     688:	80 93 8c 01 	sts	0x018C, r24
     68c:	08 95       	ret

0000068e <checkTime>:
}


int
checkTime(int hour, int minutes, int seconds)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	a8 97       	sbiw	r28, 0x28	; 40
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
	if(hour > 24)
     6a2:	49 97       	sbiw	r24, 0x19	; 25
     6a4:	d4 f0       	brlt	.+52     	; 0x6da <checkTime+0x4c>
	{
		clr_lcd();
     6a6:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
		pos_lcd(1,0);
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		char msg[40];
		strcpy(msg, "Invalid Hours");
     6b2:	8e e0       	ldi	r24, 0x0E	; 14
     6b4:	ef ed       	ldi	r30, 0xDF	; 223
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	de 01       	movw	r26, r28
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	01 90       	ld	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	8a 95       	dec	r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <checkTime+0x2e>
		puts_lcd2(msg);
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
		
		wait_avr(1000);
     6cc:	88 ee       	ldi	r24, 0xE8	; 232
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
		
		return 0;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	3c c0       	rjmp	.+120    	; 0x752 <checkTime+0xc4>
	}
	
	else if(minutes > 59)
     6da:	6c 33       	cpi	r22, 0x3C	; 60
     6dc:	71 05       	cpc	r23, r1
     6de:	d4 f0       	brlt	.+52     	; 0x714 <checkTime+0x86>
	{
		clr_lcd();
     6e0:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
		pos_lcd(1,0);
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		char msg[40];
		strcpy(msg, "Invalid Minutes");
     6ec:	80 e1       	ldi	r24, 0x10	; 16
     6ee:	ed ee       	ldi	r30, 0xED	; 237
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	de 01       	movw	r26, r28
     6f4:	11 96       	adiw	r26, 0x01	; 1
     6f6:	01 90       	ld	r0, Z+
     6f8:	0d 92       	st	X+, r0
     6fa:	8a 95       	dec	r24
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <checkTime+0x68>
		puts_lcd2(msg);
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
		
		wait_avr(1000);
     706:	88 ee       	ldi	r24, 0xE8	; 232
     708:	93 e0       	ldi	r25, 0x03	; 3
     70a:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
		
		return 0;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	1f c0       	rjmp	.+62     	; 0x752 <checkTime+0xc4>
	}
	
	else if(seconds > 59)
     714:	4c 33       	cpi	r20, 0x3C	; 60
     716:	51 05       	cpc	r21, r1
     718:	d4 f0       	brlt	.+52     	; 0x74e <checkTime+0xc0>
	{

		clr_lcd();
     71a:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
		pos_lcd(1,0);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		char msg[40];
		strcpy(msg, "Invalid Seconds");
     726:	80 e1       	ldi	r24, 0x10	; 16
     728:	ed ef       	ldi	r30, 0xFD	; 253
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	de 01       	movw	r26, r28
     72e:	11 96       	adiw	r26, 0x01	; 1
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	8a 95       	dec	r24
     736:	e1 f7       	brne	.-8      	; 0x730 <checkTime+0xa2>
		puts_lcd2(msg);
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
				
		wait_avr(1000);
     740:	88 ee       	ldi	r24, 0xE8	; 232
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
		
		return 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <checkTime+0xc4>
	}
	
	else
	{
		return 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     752:	a8 96       	adiw	r28, 0x28	; 40
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <setClock>:

char
setClock()
{
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	e7 97       	sbiw	r28, 0x37	; 55
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	PORTA = 0x00;
     784:	1b ba       	out	0x1b, r1	; 27
	
	cli();
     786:	f8 94       	cli

	char buffer[16];
	pos_lcd(0, 0);
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	sprintf(buffer, "Time: %2s:%2s:%2s", "HH", "MM", "SS");
     790:	8d e0       	ldi	r24, 0x0D	; 13
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	80 e1       	ldi	r24, 0x10	; 16
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	83 e1       	ldi	r24, 0x13	; 19
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	86 e1       	ldi	r24, 0x16	; 22
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	8e 01       	movw	r16, r28
     7b2:	0f 5f       	subi	r16, 0xFF	; 255
     7b4:	1f 4f       	sbci	r17, 0xFF	; 255
     7b6:	1f 93       	push	r17
     7b8:	0f 93       	push	r16
     7ba:	0e 94 53 07 	call	0xea6	; 0xea6 <sprintf>
	puts_lcd2(buffer);
     7be:	c8 01       	movw	r24, r16
     7c0:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
	pos_lcd(0, 0);
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	alarm_status();
     7cc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <alarm_status>

	pos_lcd(0,6);
     7d0:	66 e0       	ldi	r22, 0x06	; 6
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	
	char newTime[10];
	
	volatile int counter = 0;
     7d8:	1c 8e       	std	Y+28, r1	; 0x1c
     7da:	1b 8e       	std	Y+27, r1	; 0x1b
	
	volatile int CURRENT_PORT = 5;
     7dc:	85 e0       	ldi	r24, 0x05	; 5
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	9e 8f       	std	Y+30, r25	; 0x1e
     7e2:	8d 8f       	std	Y+29, r24	; 0x1d
	volatile char c;
	while(c != '#')
     7e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	83 32       	cpi	r24, 0x23	; 35
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <setClock+0x92>
     7f4:	48 c0       	rjmp	.+144    	; 0x886 <__stack+0x27>
			
		
			put_lcd(c);
			newTime[counter++] = c;
			
			SET_BIT(PORTA,CURRENT_PORT--);
     7f6:	01 e0       	ldi	r16, 0x01	; 1
     7f8:	10 e0       	ldi	r17, 0x00	; 0
	
	volatile int CURRENT_PORT = 5;
	volatile char c;
	while(c != '#')
	{
		c = get_value(get_key());
     7fa:	0e 94 1d 01 	call	0x23a	; 0x23a <get_key>
     7fe:	0e 94 96 00 	call	0x12c	; 0x12c <get_value>
     802:	8f 8f       	std	Y+31, r24	; 0x1f
		
		if( c >= '0' && c <= '9' )
     804:	8f 8d       	ldd	r24, Y+31	; 0x1f
     806:	80 33       	cpi	r24, 0x30	; 48
     808:	b0 f1       	brcs	.+108    	; 0x876 <__stack+0x17>
     80a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     80c:	8a 33       	cpi	r24, 0x3A	; 58
     80e:	98 f5       	brcc	.+102    	; 0x876 <__stack+0x17>
		{
			if(counter > 5)
     810:	8b 8d       	ldd	r24, Y+27	; 0x1b
     812:	9c 8d       	ldd	r25, Y+28	; 0x1c
     814:	06 97       	sbiw	r24, 0x06	; 6
     816:	bc f5       	brge	.+110    	; 0x886 <__stack+0x27>
			{
				break;
			}
				
			if(counter == 2)
     818:	8b 8d       	ldd	r24, Y+27	; 0x1b
     81a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     81c:	02 97       	sbiw	r24, 0x02	; 2
     81e:	19 f4       	brne	.+6      	; 0x826 <setClock+0xc2>
			{
				
				put_lcd(':');
     820:	8a e3       	ldi	r24, 0x3A	; 58
     822:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
			}
			
			if(counter == 4)
     826:	8b 8d       	ldd	r24, Y+27	; 0x1b
     828:	9c 8d       	ldd	r25, Y+28	; 0x1c
     82a:	04 97       	sbiw	r24, 0x04	; 4
     82c:	19 f4       	brne	.+6      	; 0x834 <setClock+0xd0>
			{
				put_lcd(':');
     82e:	8a e3       	ldi	r24, 0x3A	; 58
     830:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
			}
			
		
			put_lcd(c);
     834:	8f 8d       	ldd	r24, Y+31	; 0x1f
     836:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
			newTime[counter++] = c;
     83a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     83c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     83e:	9c 01       	movw	r18, r24
     840:	2f 5f       	subi	r18, 0xFF	; 255
     842:	3f 4f       	sbci	r19, 0xFF	; 255
     844:	3c 8f       	std	Y+28, r19	; 0x1c
     846:	2b 8f       	std	Y+27, r18	; 0x1b
     848:	2f 8d       	ldd	r18, Y+31	; 0x1f
     84a:	e1 e1       	ldi	r30, 0x11	; 17
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ec 0f       	add	r30, r28
     850:	fd 1f       	adc	r31, r29
     852:	e8 0f       	add	r30, r24
     854:	f9 1f       	adc	r31, r25
     856:	20 83       	st	Z, r18
			
			SET_BIT(PORTA,CURRENT_PORT--);
     858:	2d 8d       	ldd	r18, Y+29	; 0x1d
     85a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     85c:	c9 01       	movw	r24, r18
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	9e 8f       	std	Y+30, r25	; 0x1e
     862:	8d 8f       	std	Y+29, r24	; 0x1d
     864:	3b b3       	in	r19, 0x1b	; 27
     866:	c8 01       	movw	r24, r16
     868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	2a 95       	dec	r18
     870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
     872:	83 2b       	or	r24, r19
     874:	8b bb       	out	0x1b, r24	; 27
		
		}
		
		wait_avr(250);
     876:	8a ef       	ldi	r24, 0xFA	; 250
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	
	volatile int counter = 0;
	
	volatile int CURRENT_PORT = 5;
	volatile char c;
	while(c != '#')
     87e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     880:	83 32       	cpi	r24, 0x23	; 35
     882:	09 f0       	breq	.+2      	; 0x886 <__stack+0x27>
     884:	ba cf       	rjmp	.-140    	; 0x7fa <setClock+0x96>
		}
		
		wait_avr(250);
	}
	
	newTime[counter] = 0;
     886:	eb 8d       	ldd	r30, Y+27	; 0x1b
     888:	fc 8d       	ldd	r31, Y+28	; 0x1c
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	11 8a       	std	Z+17, r1	; 0x11
	
	if(counter < 5)
     890:	8b 8d       	ldd	r24, Y+27	; 0x1b
     892:	9c 8d       	ldd	r25, Y+28	; 0x1c
     894:	05 97       	sbiw	r24, 0x05	; 5
     896:	dc f4       	brge	.+54     	; 0x8ce <__stack+0x6f>
	{
		sei();
     898:	78 94       	sei
		clr_lcd();
     89a:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
		pos_lcd(0,0);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		strcpy(buffer,"Clock Invalid");
     8a6:	8e e0       	ldi	r24, 0x0E	; 14
     8a8:	e8 e2       	ldi	r30, 0x28	; 40
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	de 01       	movw	r26, r28
     8ae:	11 96       	adiw	r26, 0x01	; 1
     8b0:	01 90       	ld	r0, Z+
     8b2:	0d 92       	st	X+, r0
     8b4:	8a 95       	dec	r24
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <__stack+0x51>
		puts_lcd2(buffer);
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
		wait_avr(1000);
     8c0:	88 ee       	ldi	r24, 0xE8	; 232
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
		PORTA = 0x00;
     8c8:	1b ba       	out	0x1b, r1	; 27
		return c;
     8ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8cc:	34 c0       	rjmp	.+104    	; 0x936 <__stack+0xd7>

	char newHour[8];
	char newMin[8];
	char newSec[8];
	
	newHour[0] = newTime[0];
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	88 a3       	std	Y+32, r24	; 0x20
	newHour[1] = newTime[1];
     8d2:	8a 89       	ldd	r24, Y+18	; 0x12
     8d4:	89 a3       	std	Y+33, r24	; 0x21
	newHour[2] = 0;
     8d6:	1a a2       	std	Y+34, r1	; 0x22
	
	newMin[0] = newTime[2];
     8d8:	8b 89       	ldd	r24, Y+19	; 0x13
     8da:	88 a7       	std	Y+40, r24	; 0x28
	newMin[1] = newTime[3];
     8dc:	8c 89       	ldd	r24, Y+20	; 0x14
     8de:	89 a7       	std	Y+41, r24	; 0x29
	newMin[2] = 0;
     8e0:	1a a6       	std	Y+42, r1	; 0x2a
	
	newSec[0] = newTime[4];
     8e2:	8d 89       	ldd	r24, Y+21	; 0x15
     8e4:	88 ab       	std	Y+48, r24	; 0x30
	newSec[1] = newTime[5];
     8e6:	8e 89       	ldd	r24, Y+22	; 0x16
     8e8:	89 ab       	std	Y+49, r24	; 0x31
	newSec[2] = 0;
     8ea:	1a aa       	std	Y+50, r1	; 0x32
	
	int h = atoi(newHour);
     8ec:	ce 01       	movw	r24, r28
     8ee:	80 96       	adiw	r24, 0x20	; 32
     8f0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
     8f4:	6c 01       	movw	r12, r24
	int m = atoi(newMin);
     8f6:	ce 01       	movw	r24, r28
     8f8:	88 96       	adiw	r24, 0x28	; 40
     8fa:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
     8fe:	7c 01       	movw	r14, r24
	int s = atoi(newSec);
     900:	ce 01       	movw	r24, r28
     902:	c0 96       	adiw	r24, 0x30	; 48
     904:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
     908:	8c 01       	movw	r16, r24
	
	
	if(checkTime(h,m,s))
     90a:	ac 01       	movw	r20, r24
     90c:	b7 01       	movw	r22, r14
     90e:	c6 01       	movw	r24, r12
     910:	0e 94 47 03 	call	0x68e	; 0x68e <checkTime>
     914:	89 2b       	or	r24, r25
     916:	61 f0       	breq	.+24     	; 0x930 <__stack+0xd1>
	{
		hours = h;
     918:	d0 92 91 01 	sts	0x0191, r13
     91c:	c0 92 90 01 	sts	0x0190, r12
		miniutes = m;
     920:	f0 92 8f 01 	sts	0x018F, r15
     924:	e0 92 8e 01 	sts	0x018E, r14
		seconds = s;
     928:	10 93 8d 01 	sts	0x018D, r17
     92c:	00 93 8c 01 	sts	0x018C, r16
	}
	
	PORTA = 0x00;
     930:	1b ba       	out	0x1b, r1	; 27
	sei();
     932:	78 94       	sei
	return c;
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
     936:	e7 96       	adiw	r28, 0x37	; 55
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	df 90       	pop	r13
     950:	cf 90       	pop	r12
     952:	08 95       	ret

00000954 <setAlarm>:
	return 1;
}

char
setAlarm()
{	
     954:	8f 92       	push	r8
     956:	9f 92       	push	r9
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	e4 97       	sbiw	r28, 0x34	; 52
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
	clr_lcd();
     97c:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
	
	char buffer[18];
	pos_lcd(0, 0);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	clock_status();
     988:	0e 94 d7 01 	call	0x3ae	; 0x3ae <clock_status>
	
	pos_lcd(1, 0);
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	sprintf(buffer, "Alarm: %2s:%2s:%2s", "HH", "MM", "SS");
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	83 e1       	ldi	r24, 0x13	; 19
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	86 e3       	ldi	r24, 0x36	; 54
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	9f 93       	push	r25
     9b2:	8f 93       	push	r24
     9b4:	8e 01       	movw	r16, r28
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	1f 93       	push	r17
     9bc:	0f 93       	push	r16
     9be:	0e 94 53 07 	call	0xea6	; 0xea6 <sprintf>
	puts_lcd2(buffer);
     9c2:	c8 01       	movw	r24, r16
     9c4:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
	int pos = 0;
	
	int CURRENT_PORT = 5;
	
	char c;
	while(c != '#')
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f5 e0       	ldi	r31, 0x05	; 5
     9d6:	af 2e       	mov	r10, r31
     9d8:	b1 2c       	mov	r11, r1
     9da:	f0 2d       	mov	r31, r0
     9dc:	c1 2c       	mov	r12, r1
     9de:	d1 2c       	mov	r13, r1
     9e0:	e1 2c       	mov	r14, r1
     9e2:	f1 2c       	mov	r15, r1
			
			put_lcd(c);
			newTime[counter++] = c;
			pos++;
		
			SET_BIT(PORTA,CURRENT_PORT--);
     9e4:	88 24       	eor	r8, r8
     9e6:	83 94       	inc	r8
     9e8:	91 2c       	mov	r9, r1
	int CURRENT_PORT = 5;
	
	char c;
	while(c != '#')
	{	
		c = get_value(get_key());		
     9ea:	0e 94 1d 01 	call	0x23a	; 0x23a <get_key>
     9ee:	0e 94 96 00 	call	0x12c	; 0x12c <get_value>
     9f2:	18 2f       	mov	r17, r24
		pos_lcd(1,7 + pos);
     9f4:	67 e0       	ldi	r22, 0x07	; 7
     9f6:	6c 0d       	add	r22, r12
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		
		if( c >= '0' && c <= '9' )
     9fe:	80 ed       	ldi	r24, 0xD0	; 208
     a00:	81 0f       	add	r24, r17
     a02:	8a 30       	cpi	r24, 0x0A	; 10
     a04:	b0 f5       	brcc	.+108    	; 0xa72 <setAlarm+0x11e>
		{
			if(counter > 5)
     a06:	96 e0       	ldi	r25, 0x06	; 6
     a08:	e9 16       	cp	r14, r25
     a0a:	f1 04       	cpc	r15, r1
     a0c:	cc f5       	brge	.+114    	; 0xa80 <setAlarm+0x12c>
			{
				break;
			}
			
			if(counter == 2)
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	e8 16       	cp	r14, r24
     a12:	f1 04       	cpc	r15, r1
     a14:	39 f4       	brne	.+14     	; 0xa24 <setAlarm+0xd0>
			{
				
				put_lcd(':');
     a16:	8a e3       	ldi	r24, 0x3A	; 58
     a18:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
				pos++;
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	c9 1a       	sub	r12, r25
     a20:	d9 0a       	sbc	r13, r25
     a22:	0a c0       	rjmp	.+20     	; 0xa38 <setAlarm+0xe4>
			}
			
			if(counter == 4)
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	e8 16       	cp	r14, r24
     a28:	f1 04       	cpc	r15, r1
     a2a:	31 f4       	brne	.+12     	; 0xa38 <setAlarm+0xe4>
			{
				put_lcd(':');
     a2c:	8a e3       	ldi	r24, 0x3A	; 58
     a2e:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
				pos++;
     a32:	9f ef       	ldi	r25, 0xFF	; 255
     a34:	c9 1a       	sub	r12, r25
     a36:	d9 0a       	sbc	r13, r25
			}
			
			
			put_lcd(c);
     a38:	81 2f       	mov	r24, r17
     a3a:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
			newTime[counter++] = c;
     a3e:	e3 e1       	ldi	r30, 0x13	; 19
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ec 0f       	add	r30, r28
     a44:	fd 1f       	adc	r31, r29
     a46:	ee 0d       	add	r30, r14
     a48:	ff 1d       	adc	r31, r15
     a4a:	10 83       	st	Z, r17
			pos++;
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	c8 1a       	sub	r12, r24
     a50:	d8 0a       	sbc	r13, r24
		
			SET_BIT(PORTA,CURRENT_PORT--);
     a52:	2b b3       	in	r18, 0x1b	; 27
     a54:	c4 01       	movw	r24, r8
     a56:	0a 2c       	mov	r0, r10
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <setAlarm+0x10a>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <setAlarm+0x106>
     a62:	82 2b       	or	r24, r18
     a64:	8b bb       	out	0x1b, r24	; 27
     a66:	c5 01       	movw	r24, r10
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	5c 01       	movw	r10, r24
				pos++;
			}
			
			
			put_lcd(c);
			newTime[counter++] = c;
     a6c:	c7 01       	movw	r24, r14
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	7c 01       	movw	r14, r24
		
			SET_BIT(PORTA,CURRENT_PORT--);
			
		}
		
		wait_avr(250);
     a72:	8a ef       	ldi	r24, 0xFA	; 250
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	int pos = 0;
	
	int CURRENT_PORT = 5;
	
	char c;
	while(c != '#')
     a7a:	13 32       	cpi	r17, 0x23	; 35
     a7c:	09 f0       	breq	.+2      	; 0xa80 <setAlarm+0x12c>
     a7e:	b5 cf       	rjmp	.-150    	; 0x9ea <setAlarm+0x96>
		}
		
		wait_avr(250);
	}
	
	newTime[counter] = 0;
     a80:	fe 01       	movw	r30, r28
     a82:	ee 0d       	add	r30, r14
     a84:	ff 1d       	adc	r31, r15
     a86:	13 8a       	std	Z+19, r1	; 0x13

	if(counter < 5)
     a88:	95 e0       	ldi	r25, 0x05	; 5
     a8a:	e9 16       	cp	r14, r25
     a8c:	f1 04       	cpc	r15, r1
     a8e:	cc f4       	brge	.+50     	; 0xac2 <setAlarm+0x16e>
	{
		clr_lcd();
     a90:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
		pos_lcd(1,0);
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		strcpy(buffer,"Alarm Invalid");
     a9c:	8e e0       	ldi	r24, 0x0E	; 14
     a9e:	e9 e4       	ldi	r30, 0x49	; 73
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	de 01       	movw	r26, r28
     aa4:	11 96       	adiw	r26, 0x01	; 1
     aa6:	01 90       	ld	r0, Z+
     aa8:	0d 92       	st	X+, r0
     aaa:	8a 95       	dec	r24
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <setAlarm+0x152>
		puts_lcd2(buffer);
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
		wait_avr(1500);
     ab6:	8c ed       	ldi	r24, 0xDC	; 220
     ab8:	95 e0       	ldi	r25, 0x05	; 5
     aba:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
		
	
		
		PORTA = 0x00;
     abe:	1b ba       	out	0x1b, r1	; 27
     ac0:	38 c0       	rjmp	.+112    	; 0xb32 <setAlarm+0x1de>
	{
		char newHour[8];
		char newMin[8];
		char newSec[8];
		
		newHour[0] = newTime[0];
     ac2:	8b 89       	ldd	r24, Y+19	; 0x13
     ac4:	8d a7       	std	Y+45, r24	; 0x2d
		newHour[1] = newTime[1];
     ac6:	8c 89       	ldd	r24, Y+20	; 0x14
     ac8:	8e a7       	std	Y+46, r24	; 0x2e
		newHour[2] = 0;
     aca:	1f a6       	std	Y+47, r1	; 0x2f
		
		newMin[0] = newTime[2];
     acc:	8d 89       	ldd	r24, Y+21	; 0x15
     ace:	8d a3       	std	Y+37, r24	; 0x25
		newMin[1] = newTime[3];
     ad0:	8e 89       	ldd	r24, Y+22	; 0x16
     ad2:	8e a3       	std	Y+38, r24	; 0x26
		newMin[2] = 0;
     ad4:	1f a2       	std	Y+39, r1	; 0x27
		
		newSec[0] = newTime[4];
     ad6:	8f 89       	ldd	r24, Y+23	; 0x17
     ad8:	8d 8f       	std	Y+29, r24	; 0x1d
		newSec[1] = newTime[5];
     ada:	88 8d       	ldd	r24, Y+24	; 0x18
     adc:	8e 8f       	std	Y+30, r24	; 0x1e
		newSec[2] = 0;
     ade:	1f 8e       	std	Y+31, r1	; 0x1f
		
		int h = atoi(newHour);
     ae0:	ce 01       	movw	r24, r28
     ae2:	8d 96       	adiw	r24, 0x2d	; 45
     ae4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
     ae8:	5c 01       	movw	r10, r24
		int m = atoi(newMin);
     aea:	ce 01       	movw	r24, r28
     aec:	85 96       	adiw	r24, 0x25	; 37
     aee:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
     af2:	6c 01       	movw	r12, r24
		int s = atoi(newSec);
     af4:	ce 01       	movw	r24, r28
     af6:	4d 96       	adiw	r24, 0x1d	; 29
     af8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
     afc:	7c 01       	movw	r14, r24
		
		
		if(checkTime(h,m,s))
     afe:	ac 01       	movw	r20, r24
     b00:	b6 01       	movw	r22, r12
     b02:	c5 01       	movw	r24, r10
     b04:	0e 94 47 03 	call	0x68e	; 0x68e <checkTime>
     b08:	89 2b       	or	r24, r25
     b0a:	91 f0       	breq	.+36     	; 0xb30 <setAlarm+0x1dc>
		{
			alarm_hours = h;
     b0c:	b0 92 65 00 	sts	0x0065, r11
     b10:	a0 92 64 00 	sts	0x0064, r10
			alarm_minutes = m;
     b14:	d0 92 63 00 	sts	0x0063, r13
     b18:	c0 92 62 00 	sts	0x0062, r12
			alarm_seconds = s;
     b1c:	f0 92 61 00 	sts	0x0061, r15
     b20:	e0 92 60 00 	sts	0x0060, r14
			
			alarm_set = 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 8b 01 	sts	0x018B, r25
     b2c:	80 93 8a 01 	sts	0x018A, r24
		}
		
		PORTA = 0x00;
     b30:	1b ba       	out	0x1b, r1	; 27
	}
	
	return c;
}
     b32:	81 2f       	mov	r24, r17
     b34:	e4 96       	adiw	r28, 0x34	; 52
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	08 95       	ret

00000b5a <getPin>:

int
getPin()
{
     b5a:	af 92       	push	r10
     b5c:	bf 92       	push	r11
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	6c 97       	sbiw	r28, 0x1c	; 28
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
	clr_lcd();
     b7e:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
	char buffer[18];
	pos_lcd(0, 0);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	clock_status();
     b8a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <clock_status>
	
	pos_lcd(1, 0);
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
	sprintf(buffer, "Pin: %4s", "####");
     b96:	87 e5       	ldi	r24, 0x57	; 87
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	8c e5       	ldi	r24, 0x5C	; 92
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	8e 01       	movw	r16, r28
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	1f 93       	push	r17
     bae:	0f 93       	push	r16
     bb0:	0e 94 53 07 	call	0xea6	; 0xea6 <sprintf>
	puts_lcd2(buffer);
     bb4:	c8 01       	movw	r24, r16
     bb6:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
	
	int p = -1;
	int counter = 0;
	int CURRENT_PORT = 3;
	char c;
	while(c != '*')
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f3 e0       	ldi	r31, 0x03	; 3
     bca:	cf 2e       	mov	r12, r31
     bcc:	d1 2c       	mov	r13, r1
     bce:	f0 2d       	mov	r31, r0
     bd0:	e1 2c       	mov	r14, r1
     bd2:	f1 2c       	mov	r15, r1
			}
			
			put_lcd(c);
			newPin[counter++] = c;
			
			SET_BIT(PORTA,CURRENT_PORT--);		
     bd4:	aa 24       	eor	r10, r10
     bd6:	a3 94       	inc	r10
     bd8:	b1 2c       	mov	r11, r1
	int counter = 0;
	int CURRENT_PORT = 3;
	char c;
	while(c != '*')
	{
		c = get_value(get_key());
     bda:	0e 94 1d 01 	call	0x23a	; 0x23a <get_key>
     bde:	0e 94 96 00 	call	0x12c	; 0x12c <get_value>
     be2:	18 2f       	mov	r17, r24
		pos_lcd(1,5 + counter);
     be4:	65 e0       	ldi	r22, 0x05	; 5
     be6:	6e 0d       	add	r22, r14
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		
		if( c >= '0' && c <= '9' )
     bee:	80 ed       	ldi	r24, 0xD0	; 208
     bf0:	81 0f       	add	r24, r17
     bf2:	8a 30       	cpi	r24, 0x0A	; 10
     bf4:	f0 f4       	brcc	.+60     	; 0xc32 <getPin+0xd8>
		{
			if(counter > 3)
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	e8 16       	cp	r14, r24
     bfa:	f1 04       	cpc	r15, r1
     bfc:	04 f5       	brge	.+64     	; 0xc3e <getPin+0xe4>
			{
				break;
			}
			
			put_lcd(c);
     bfe:	81 2f       	mov	r24, r17
     c00:	0e 94 81 00 	call	0x102	; 0x102 <put_lcd>
			newPin[counter++] = c;
     c04:	e3 e1       	ldi	r30, 0x13	; 19
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	ec 0f       	add	r30, r28
     c0a:	fd 1f       	adc	r31, r29
     c0c:	ee 0d       	add	r30, r14
     c0e:	ff 1d       	adc	r31, r15
     c10:	10 83       	st	Z, r17
			
			SET_BIT(PORTA,CURRENT_PORT--);		
     c12:	2b b3       	in	r18, 0x1b	; 27
     c14:	c5 01       	movw	r24, r10
     c16:	0c 2c       	mov	r0, r12
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <getPin+0xc4>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <getPin+0xc0>
     c22:	82 2b       	or	r24, r18
     c24:	8b bb       	out	0x1b, r24	; 27
     c26:	c6 01       	movw	r24, r12
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	6c 01       	movw	r12, r24
			{
				break;
			}
			
			put_lcd(c);
			newPin[counter++] = c;
     c2c:	c7 01       	movw	r24, r14
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	7c 01       	movw	r14, r24
			
			SET_BIT(PORTA,CURRENT_PORT--);		
		}
		wait_avr(250);
     c32:	8a ef       	ldi	r24, 0xFA	; 250
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	
	int p = -1;
	int counter = 0;
	int CURRENT_PORT = 3;
	char c;
	while(c != '*')
     c3a:	1a 32       	cpi	r17, 0x2A	; 42
     c3c:	71 f6       	brne	.-100    	; 0xbda <getPin+0x80>
			SET_BIT(PORTA,CURRENT_PORT--);		
		}
		wait_avr(250);
	}

	if(counter < 3)
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	e9 16       	cp	r14, r25
     c42:	f1 04       	cpc	r15, r1
     c44:	c4 f4       	brge	.+48     	; 0xc76 <getPin+0x11c>
	{
		pos_lcd(1,0);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
		strcpy(buffer,"Pin is Invalid");
     c4e:	8f e0       	ldi	r24, 0x0F	; 15
     c50:	e5 e6       	ldi	r30, 0x65	; 101
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	de 01       	movw	r26, r28
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	01 90       	ld	r0, Z+
     c5a:	0d 92       	st	X+, r0
     c5c:	8a 95       	dec	r24
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <getPin+0xfe>
		puts_lcd2(buffer);
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
		wait_avr(1000);
     c68:	88 ee       	ldi	r24, 0xE8	; 232
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
	sprintf(buffer, "Pin: %4s", "####");
	puts_lcd2(buffer);

	char newPin[10];
	
	int p = -1;
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	9f ef       	ldi	r25, 0xFF	; 255
     c74:	0b c0       	rjmp	.+22     	; 0xc8c <getPin+0x132>
		
	}
	
	else
	{
		newPin[counter] = 0;
     c76:	e3 e1       	ldi	r30, 0x13	; 19
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ec 0f       	add	r30, r28
     c7c:	fd 1f       	adc	r31, r29
     c7e:	ee 0d       	add	r30, r14
     c80:	ff 1d       	adc	r31, r15
     c82:	10 82       	st	Z, r1
		p = atoi(newPin);
     c84:	ce 01       	movw	r24, r28
     c86:	43 96       	adiw	r24, 0x13	; 19
     c88:	0e 94 2d 07 	call	0xe5a	; 0xe5a <atoi>
	}

	PORTA = 0x00;
     c8c:	1b ba       	out	0x1b, r1	; 27
	
	return p;
}
     c8e:	6c 96       	adiw	r28, 0x1c	; 28
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	08 95       	ret

00000cb0 <auth>:
	sei();
	return c;
}

int auth()
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	62 97       	sbiw	r28, 0x12	; 18
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
	if(pin_set)
     cc4:	80 91 88 01 	lds	r24, 0x0188
     cc8:	90 91 89 01 	lds	r25, 0x0189
     ccc:	89 2b       	or	r24, r25
     cce:	59 f1       	breq	.+86     	; 0xd26 <auth+0x76>
	{
		int entered_pin = getPin();
     cd0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <getPin>
		if(entered_pin > -1)
     cd4:	99 23       	and	r25, r25
     cd6:	54 f1       	brlt	.+84     	; 0xd2c <auth+0x7c>
		{
			if(pin == entered_pin)
     cd8:	20 91 92 01 	lds	r18, 0x0192
     cdc:	30 91 93 01 	lds	r19, 0x0193
     ce0:	82 17       	cp	r24, r18
     ce2:	93 07       	cpc	r25, r19
     ce4:	31 f1       	breq	.+76     	; 0xd32 <auth+0x82>
				return 1;
			}
			
			else
			{
				clr_lcd();
     ce6:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
					
				char buffer[18];
				pos_lcd(0, 0);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
				clock_status();
     cf2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <clock_status>
					
				pos_lcd(1,0);
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 6d 00 	call	0xda	; 0xda <pos_lcd>
				strcpy(buffer,"Incorrect Pin");
     cfe:	8e e0       	ldi	r24, 0x0E	; 14
     d00:	e4 e7       	ldi	r30, 0x74	; 116
     d02:	f1 e0       	ldi	r31, 0x01	; 1
     d04:	de 01       	movw	r26, r28
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	01 90       	ld	r0, Z+
     d0a:	0d 92       	st	X+, r0
     d0c:	8a 95       	dec	r24
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <auth+0x58>
				puts_lcd2(buffer);
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	0e 94 85 00 	call	0x10a	; 0x10a <puts_lcd2>
				wait_avr(1500);
     d18:	8c ed       	ldi	r24, 0xDC	; 220
     d1a:	95 e0       	ldi	r25, 0x05	; 5
     d1c:	0e 94 bf 00 	call	0x17e	; 0x17e <wait_avr>
				
				return 0;
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	08 c0       	rjmp	.+16     	; 0xd36 <auth+0x86>
			}
		}
		
	}
	
	return 1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <auth+0x86>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <auth+0x86>
		int entered_pin = getPin();
		if(entered_pin > -1)
		{
			if(pin == entered_pin)
			{
				return 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
		}
		
	}
	
	return 1;
}
     d36:	62 96       	adiw	r28, 0x12	; 18
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <setPin>:
}


void setPin()
{
	int newPin = getPin();
     d48:	0e 94 ad 05 	call	0xb5a	; 0xb5a <getPin>
	
	if(newPin > -1)
     d4c:	99 23       	and	r25, r25
     d4e:	54 f0       	brlt	.+20     	; 0xd64 <setPin+0x1c>
	{
		pin = newPin;
     d50:	90 93 93 01 	sts	0x0193, r25
     d54:	80 93 92 01 	sts	0x0192, r24
		pin_set = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 89 01 	sts	0x0189, r25
     d60:	80 93 88 01 	sts	0x0188, r24
     d64:	08 95       	ret

00000d66 <main>:
#include "avr/interrupt.h"

int main(void)
{
    /* Replace with your application code */
	DDRA =  0xFF;
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	8a bb       	out	0x1a, r24	; 26
	
    ini_lcd();
     d6a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ini_lcd>
	clr_lcd();
     d6e:	0e 94 68 00 	call	0xd0	; 0xd0 <clr_lcd>
	
	sei();
     d72:	78 94       	sei
	
	TCCR1B |= 1<<CS10 | 1<<CS12 | 1<<WGM12;
     d74:	8e b5       	in	r24, 0x2e	; 46
     d76:	8d 60       	ori	r24, 0x0D	; 13
     d78:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A;
     d7a:	89 b7       	in	r24, 0x39	; 57
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	89 bf       	out	0x39, r24	; 57
	OCR1A = 7812;
     d80:	84 e8       	ldi	r24, 0x84	; 132
     d82:	9e e1       	ldi	r25, 0x1E	; 30
     d84:	9b bd       	out	0x2b, r25	; 43
     d86:	8a bd       	out	0x2a, r24	; 42
			}
			FLAG = 0;
		}
		if(c == 'C')
		{
			FLAG = 1;
     d88:	c1 e0       	ldi	r28, 0x01	; 1
     d8a:	d0 e0       	ldi	r29, 0x00	; 0
	OCR1A = 7812;
	
	while (1) 
    {
		
		char c = get_value(get_key());
     d8c:	0e 94 1d 01 	call	0x23a	; 0x23a <get_key>
     d90:	0e 94 96 00 	call	0x12c	; 0x12c <get_value>
		
		if(c == 'A')
     d94:	81 34       	cpi	r24, 0x41	; 65
     d96:	79 f4       	brne	.+30     	; 0xdb6 <main+0x50>
		{
			FLAG = 1;
     d98:	d0 93 85 01 	sts	0x0185, r29
     d9c:	c0 93 84 01 	sts	0x0184, r28
			if(auth())
     da0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <auth>
     da4:	89 2b       	or	r24, r25
     da6:	11 f0       	breq	.+4      	; 0xdac <main+0x46>
			{
				setClock();
     da8:	0e 94 b2 03 	call	0x764	; 0x764 <setClock>
			}
			FLAG = 0;
     dac:	10 92 85 01 	sts	0x0185, r1
     db0:	10 92 84 01 	sts	0x0184, r1
     db4:	21 c0       	rjmp	.+66     	; 0xdf8 <main+0x92>
		
		}
		if(c == 'B')
     db6:	82 34       	cpi	r24, 0x42	; 66
     db8:	79 f4       	brne	.+30     	; 0xdd8 <main+0x72>
		{
			FLAG = 1;
     dba:	d0 93 85 01 	sts	0x0185, r29
     dbe:	c0 93 84 01 	sts	0x0184, r28
			if(auth())
     dc2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <auth>
     dc6:	89 2b       	or	r24, r25
     dc8:	11 f0       	breq	.+4      	; 0xdce <main+0x68>
			{
				setAlarm();				
     dca:	0e 94 aa 04 	call	0x954	; 0x954 <setAlarm>
			}
			FLAG = 0;
     dce:	10 92 85 01 	sts	0x0185, r1
     dd2:	10 92 84 01 	sts	0x0184, r1
     dd6:	10 c0       	rjmp	.+32     	; 0xdf8 <main+0x92>
		}
		if(c == 'C')
     dd8:	83 34       	cpi	r24, 0x43	; 67
     dda:	71 f4       	brne	.+28     	; 0xdf8 <main+0x92>
		{
			FLAG = 1;
     ddc:	d0 93 85 01 	sts	0x0185, r29
     de0:	c0 93 84 01 	sts	0x0184, r28
			if(auth())
     de4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <auth>
     de8:	89 2b       	or	r24, r25
     dea:	11 f0       	breq	.+4      	; 0xdf0 <main+0x8a>
			{
				setPin();						
     dec:	0e 94 a4 06 	call	0xd48	; 0xd48 <setPin>
			}
			FLAG = 0;
     df0:	10 92 85 01 	sts	0x0185, r1
     df4:	10 92 84 01 	sts	0x0184, r1

		}
		
		if(FLAG_ALARM)
     df8:	80 91 82 01 	lds	r24, 0x0182
     dfc:	90 91 83 01 	lds	r25, 0x0183
     e00:	89 2b       	or	r24, r25
     e02:	21 f2       	breq	.-120    	; 0xd8c <main+0x26>
		{
			alarm();
     e04:	0e 94 d5 02 	call	0x5aa	; 0x5aa <alarm>
			FLAG_ALARM = 0;
     e08:	10 92 83 01 	sts	0x0183, r1
     e0c:	10 92 82 01 	sts	0x0182, r1
     e10:	bd cf       	rjmp	.-134    	; 0xd8c <main+0x26>

00000e12 <__vector_7>:
		//wait_avr(1000);
    }
}

ISR(TIMER1_COMPA_vect)
{
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
	time();
     e34:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <time>
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <atoi>:
     e5a:	fc 01       	movw	r30, r24
     e5c:	88 27       	eor	r24, r24
     e5e:	99 27       	eor	r25, r25
     e60:	e8 94       	clt
     e62:	21 91       	ld	r18, Z+
     e64:	20 32       	cpi	r18, 0x20	; 32
     e66:	e9 f3       	breq	.-6      	; 0xe62 <atoi+0x8>
     e68:	29 30       	cpi	r18, 0x09	; 9
     e6a:	10 f0       	brcs	.+4      	; 0xe70 <atoi+0x16>
     e6c:	2e 30       	cpi	r18, 0x0E	; 14
     e6e:	c8 f3       	brcs	.-14     	; 0xe62 <atoi+0x8>
     e70:	2b 32       	cpi	r18, 0x2B	; 43
     e72:	41 f0       	breq	.+16     	; 0xe84 <atoi+0x2a>
     e74:	2d 32       	cpi	r18, 0x2D	; 45
     e76:	39 f4       	brne	.+14     	; 0xe86 <atoi+0x2c>
     e78:	68 94       	set
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <atoi+0x2a>
     e7c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__mulhi_const_10>
     e80:	82 0f       	add	r24, r18
     e82:	91 1d       	adc	r25, r1
     e84:	21 91       	ld	r18, Z+
     e86:	20 53       	subi	r18, 0x30	; 48
     e88:	2a 30       	cpi	r18, 0x0A	; 10
     e8a:	c0 f3       	brcs	.-16     	; 0xe7c <atoi+0x22>
     e8c:	1e f4       	brtc	.+6      	; 0xe94 <atoi+0x3a>
     e8e:	90 95       	com	r25
     e90:	81 95       	neg	r24
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	08 95       	ret

00000e96 <__mulhi_const_10>:
     e96:	7a e0       	ldi	r23, 0x0A	; 10
     e98:	97 9f       	mul	r25, r23
     e9a:	90 2d       	mov	r25, r0
     e9c:	87 9f       	mul	r24, r23
     e9e:	80 2d       	mov	r24, r0
     ea0:	91 0d       	add	r25, r1
     ea2:	11 24       	eor	r1, r1
     ea4:	08 95       	ret

00000ea6 <sprintf>:
     ea6:	ae e0       	ldi	r26, 0x0E	; 14
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__prologue_saves__+0x1c>
     eb2:	0d 89       	ldd	r16, Y+21	; 0x15
     eb4:	1e 89       	ldd	r17, Y+22	; 0x16
     eb6:	86 e0       	ldi	r24, 0x06	; 6
     eb8:	8c 83       	std	Y+4, r24	; 0x04
     eba:	1a 83       	std	Y+2, r17	; 0x02
     ebc:	09 83       	std	Y+1, r16	; 0x01
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	9f e7       	ldi	r25, 0x7F	; 127
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	ae 01       	movw	r20, r28
     ec8:	47 5e       	subi	r20, 0xE7	; 231
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	6f 89       	ldd	r22, Y+23	; 0x17
     ece:	78 8d       	ldd	r23, Y+24	; 0x18
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	0e 94 76 07 	call	0xeec	; 0xeec <vfprintf>
     ed8:	2f 81       	ldd	r18, Y+7	; 0x07
     eda:	38 85       	ldd	r19, Y+8	; 0x08
     edc:	f8 01       	movw	r30, r16
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	10 82       	st	Z, r1
     ee4:	2e 96       	adiw	r28, 0x0e	; 14
     ee6:	e4 e0       	ldi	r30, 0x04	; 4
     ee8:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__epilogue_restores__+0x1c>

00000eec <vfprintf>:
     eec:	ac e0       	ldi	r26, 0x0C	; 12
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ec e7       	ldi	r30, 0x7C	; 124
     ef2:	f7 e0       	ldi	r31, 0x07	; 7
     ef4:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__prologue_saves__>
     ef8:	7c 01       	movw	r14, r24
     efa:	6b 01       	movw	r12, r22
     efc:	8a 01       	movw	r16, r20
     efe:	fc 01       	movw	r30, r24
     f00:	17 82       	std	Z+7, r1	; 0x07
     f02:	16 82       	std	Z+6, r1	; 0x06
     f04:	83 81       	ldd	r24, Z+3	; 0x03
     f06:	81 ff       	sbrs	r24, 1
     f08:	bd c1       	rjmp	.+890    	; 0x1284 <vfprintf+0x398>
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	4c 01       	movw	r8, r24
     f10:	f7 01       	movw	r30, r14
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	f6 01       	movw	r30, r12
     f16:	93 fd       	sbrc	r25, 3
     f18:	85 91       	lpm	r24, Z+
     f1a:	93 ff       	sbrs	r25, 3
     f1c:	81 91       	ld	r24, Z+
     f1e:	6f 01       	movw	r12, r30
     f20:	88 23       	and	r24, r24
     f22:	09 f4       	brne	.+2      	; 0xf26 <vfprintf+0x3a>
     f24:	ab c1       	rjmp	.+854    	; 0x127c <vfprintf+0x390>
     f26:	85 32       	cpi	r24, 0x25	; 37
     f28:	39 f4       	brne	.+14     	; 0xf38 <vfprintf+0x4c>
     f2a:	93 fd       	sbrc	r25, 3
     f2c:	85 91       	lpm	r24, Z+
     f2e:	93 ff       	sbrs	r25, 3
     f30:	81 91       	ld	r24, Z+
     f32:	6f 01       	movw	r12, r30
     f34:	85 32       	cpi	r24, 0x25	; 37
     f36:	29 f4       	brne	.+10     	; 0xf42 <vfprintf+0x56>
     f38:	b7 01       	movw	r22, r14
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
     f40:	e7 cf       	rjmp	.-50     	; 0xf10 <vfprintf+0x24>
     f42:	51 2c       	mov	r5, r1
     f44:	31 2c       	mov	r3, r1
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	20 32       	cpi	r18, 0x20	; 32
     f4a:	a0 f4       	brcc	.+40     	; 0xf74 <vfprintf+0x88>
     f4c:	8b 32       	cpi	r24, 0x2B	; 43
     f4e:	69 f0       	breq	.+26     	; 0xf6a <vfprintf+0x7e>
     f50:	30 f4       	brcc	.+12     	; 0xf5e <vfprintf+0x72>
     f52:	80 32       	cpi	r24, 0x20	; 32
     f54:	59 f0       	breq	.+22     	; 0xf6c <vfprintf+0x80>
     f56:	83 32       	cpi	r24, 0x23	; 35
     f58:	69 f4       	brne	.+26     	; 0xf74 <vfprintf+0x88>
     f5a:	20 61       	ori	r18, 0x10	; 16
     f5c:	2c c0       	rjmp	.+88     	; 0xfb6 <vfprintf+0xca>
     f5e:	8d 32       	cpi	r24, 0x2D	; 45
     f60:	39 f0       	breq	.+14     	; 0xf70 <vfprintf+0x84>
     f62:	80 33       	cpi	r24, 0x30	; 48
     f64:	39 f4       	brne	.+14     	; 0xf74 <vfprintf+0x88>
     f66:	21 60       	ori	r18, 0x01	; 1
     f68:	26 c0       	rjmp	.+76     	; 0xfb6 <vfprintf+0xca>
     f6a:	22 60       	ori	r18, 0x02	; 2
     f6c:	24 60       	ori	r18, 0x04	; 4
     f6e:	23 c0       	rjmp	.+70     	; 0xfb6 <vfprintf+0xca>
     f70:	28 60       	ori	r18, 0x08	; 8
     f72:	21 c0       	rjmp	.+66     	; 0xfb6 <vfprintf+0xca>
     f74:	27 fd       	sbrc	r18, 7
     f76:	27 c0       	rjmp	.+78     	; 0xfc6 <vfprintf+0xda>
     f78:	30 ed       	ldi	r19, 0xD0	; 208
     f7a:	38 0f       	add	r19, r24
     f7c:	3a 30       	cpi	r19, 0x0A	; 10
     f7e:	78 f4       	brcc	.+30     	; 0xf9e <vfprintf+0xb2>
     f80:	26 ff       	sbrs	r18, 6
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <vfprintf+0xa4>
     f84:	fa e0       	ldi	r31, 0x0A	; 10
     f86:	5f 9e       	mul	r5, r31
     f88:	30 0d       	add	r19, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	53 2e       	mov	r5, r19
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <vfprintf+0xca>
     f90:	8a e0       	ldi	r24, 0x0A	; 10
     f92:	38 9e       	mul	r3, r24
     f94:	30 0d       	add	r19, r0
     f96:	11 24       	eor	r1, r1
     f98:	33 2e       	mov	r3, r19
     f9a:	20 62       	ori	r18, 0x20	; 32
     f9c:	0c c0       	rjmp	.+24     	; 0xfb6 <vfprintf+0xca>
     f9e:	8e 32       	cpi	r24, 0x2E	; 46
     fa0:	21 f4       	brne	.+8      	; 0xfaa <vfprintf+0xbe>
     fa2:	26 fd       	sbrc	r18, 6
     fa4:	6b c1       	rjmp	.+726    	; 0x127c <vfprintf+0x390>
     fa6:	20 64       	ori	r18, 0x40	; 64
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <vfprintf+0xca>
     faa:	8c 36       	cpi	r24, 0x6C	; 108
     fac:	11 f4       	brne	.+4      	; 0xfb2 <vfprintf+0xc6>
     fae:	20 68       	ori	r18, 0x80	; 128
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <vfprintf+0xca>
     fb2:	88 36       	cpi	r24, 0x68	; 104
     fb4:	41 f4       	brne	.+16     	; 0xfc6 <vfprintf+0xda>
     fb6:	f6 01       	movw	r30, r12
     fb8:	93 fd       	sbrc	r25, 3
     fba:	85 91       	lpm	r24, Z+
     fbc:	93 ff       	sbrs	r25, 3
     fbe:	81 91       	ld	r24, Z+
     fc0:	6f 01       	movw	r12, r30
     fc2:	81 11       	cpse	r24, r1
     fc4:	c1 cf       	rjmp	.-126    	; 0xf48 <vfprintf+0x5c>
     fc6:	98 2f       	mov	r25, r24
     fc8:	9f 7d       	andi	r25, 0xDF	; 223
     fca:	95 54       	subi	r25, 0x45	; 69
     fcc:	93 30       	cpi	r25, 0x03	; 3
     fce:	28 f4       	brcc	.+10     	; 0xfda <vfprintf+0xee>
     fd0:	0c 5f       	subi	r16, 0xFC	; 252
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	ff e3       	ldi	r31, 0x3F	; 63
     fd6:	f9 83       	std	Y+1, r31	; 0x01
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <vfprintf+0x108>
     fda:	83 36       	cpi	r24, 0x63	; 99
     fdc:	31 f0       	breq	.+12     	; 0xfea <vfprintf+0xfe>
     fde:	83 37       	cpi	r24, 0x73	; 115
     fe0:	71 f0       	breq	.+28     	; 0xffe <vfprintf+0x112>
     fe2:	83 35       	cpi	r24, 0x53	; 83
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <vfprintf+0xfc>
     fe6:	5b c0       	rjmp	.+182    	; 0x109e <vfprintf+0x1b2>
     fe8:	22 c0       	rjmp	.+68     	; 0x102e <vfprintf+0x142>
     fea:	f8 01       	movw	r30, r16
     fec:	80 81       	ld	r24, Z
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	0e 5f       	subi	r16, 0xFE	; 254
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	44 24       	eor	r4, r4
     ff6:	43 94       	inc	r4
     ff8:	51 2c       	mov	r5, r1
     ffa:	54 01       	movw	r10, r8
     ffc:	15 c0       	rjmp	.+42     	; 0x1028 <vfprintf+0x13c>
     ffe:	38 01       	movw	r6, r16
    1000:	f2 e0       	ldi	r31, 0x02	; 2
    1002:	6f 0e       	add	r6, r31
    1004:	71 1c       	adc	r7, r1
    1006:	f8 01       	movw	r30, r16
    1008:	a0 80       	ld	r10, Z
    100a:	b1 80       	ldd	r11, Z+1	; 0x01
    100c:	26 ff       	sbrs	r18, 6
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <vfprintf+0x12a>
    1010:	65 2d       	mov	r22, r5
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x12e>
    1016:	6f ef       	ldi	r22, 0xFF	; 255
    1018:	7f ef       	ldi	r23, 0xFF	; 255
    101a:	c5 01       	movw	r24, r10
    101c:	2c 87       	std	Y+12, r18	; 0x0c
    101e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <strnlen>
    1022:	2c 01       	movw	r4, r24
    1024:	83 01       	movw	r16, r6
    1026:	2c 85       	ldd	r18, Y+12	; 0x0c
    1028:	2f 77       	andi	r18, 0x7F	; 127
    102a:	22 2e       	mov	r2, r18
    102c:	17 c0       	rjmp	.+46     	; 0x105c <vfprintf+0x170>
    102e:	38 01       	movw	r6, r16
    1030:	f2 e0       	ldi	r31, 0x02	; 2
    1032:	6f 0e       	add	r6, r31
    1034:	71 1c       	adc	r7, r1
    1036:	f8 01       	movw	r30, r16
    1038:	a0 80       	ld	r10, Z
    103a:	b1 80       	ldd	r11, Z+1	; 0x01
    103c:	26 ff       	sbrs	r18, 6
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <vfprintf+0x15a>
    1040:	65 2d       	mov	r22, r5
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <vfprintf+0x15e>
    1046:	6f ef       	ldi	r22, 0xFF	; 255
    1048:	7f ef       	ldi	r23, 0xFF	; 255
    104a:	c5 01       	movw	r24, r10
    104c:	2c 87       	std	Y+12, r18	; 0x0c
    104e:	0e 94 48 09 	call	0x1290	; 0x1290 <strnlen_P>
    1052:	2c 01       	movw	r4, r24
    1054:	2c 85       	ldd	r18, Y+12	; 0x0c
    1056:	20 68       	ori	r18, 0x80	; 128
    1058:	22 2e       	mov	r2, r18
    105a:	83 01       	movw	r16, r6
    105c:	23 fc       	sbrc	r2, 3
    105e:	1b c0       	rjmp	.+54     	; 0x1096 <vfprintf+0x1aa>
    1060:	83 2d       	mov	r24, r3
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	48 16       	cp	r4, r24
    1066:	59 06       	cpc	r5, r25
    1068:	b0 f4       	brcc	.+44     	; 0x1096 <vfprintf+0x1aa>
    106a:	b7 01       	movw	r22, r14
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1074:	3a 94       	dec	r3
    1076:	f4 cf       	rjmp	.-24     	; 0x1060 <vfprintf+0x174>
    1078:	f5 01       	movw	r30, r10
    107a:	27 fc       	sbrc	r2, 7
    107c:	85 91       	lpm	r24, Z+
    107e:	27 fe       	sbrs	r2, 7
    1080:	81 91       	ld	r24, Z+
    1082:	5f 01       	movw	r10, r30
    1084:	b7 01       	movw	r22, r14
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    108c:	31 10       	cpse	r3, r1
    108e:	3a 94       	dec	r3
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	4f 1a       	sub	r4, r31
    1094:	51 08       	sbc	r5, r1
    1096:	41 14       	cp	r4, r1
    1098:	51 04       	cpc	r5, r1
    109a:	71 f7       	brne	.-36     	; 0x1078 <vfprintf+0x18c>
    109c:	e5 c0       	rjmp	.+458    	; 0x1268 <vfprintf+0x37c>
    109e:	84 36       	cpi	r24, 0x64	; 100
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <vfprintf+0x1ba>
    10a2:	89 36       	cpi	r24, 0x69	; 105
    10a4:	39 f5       	brne	.+78     	; 0x10f4 <vfprintf+0x208>
    10a6:	f8 01       	movw	r30, r16
    10a8:	27 ff       	sbrs	r18, 7
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <vfprintf+0x1ce>
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	0c 5f       	subi	r16, 0xFC	; 252
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <vfprintf+0x1de>
    10ba:	60 81       	ld	r22, Z
    10bc:	71 81       	ldd	r23, Z+1	; 0x01
    10be:	07 2e       	mov	r0, r23
    10c0:	00 0c       	add	r0, r0
    10c2:	88 0b       	sbc	r24, r24
    10c4:	99 0b       	sbc	r25, r25
    10c6:	0e 5f       	subi	r16, 0xFE	; 254
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	2f 76       	andi	r18, 0x6F	; 111
    10cc:	72 2e       	mov	r7, r18
    10ce:	97 ff       	sbrs	r25, 7
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <vfprintf+0x1f8>
    10d2:	90 95       	com	r25
    10d4:	80 95       	com	r24
    10d6:	70 95       	com	r23
    10d8:	61 95       	neg	r22
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	20 68       	ori	r18, 0x80	; 128
    10e2:	72 2e       	mov	r7, r18
    10e4:	2a e0       	ldi	r18, 0x0A	; 10
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	a4 01       	movw	r20, r8
    10ea:	0e 94 96 09 	call	0x132c	; 0x132c <__ultoa_invert>
    10ee:	a8 2e       	mov	r10, r24
    10f0:	a8 18       	sub	r10, r8
    10f2:	44 c0       	rjmp	.+136    	; 0x117c <vfprintf+0x290>
    10f4:	85 37       	cpi	r24, 0x75	; 117
    10f6:	29 f4       	brne	.+10     	; 0x1102 <vfprintf+0x216>
    10f8:	2f 7e       	andi	r18, 0xEF	; 239
    10fa:	b2 2e       	mov	r11, r18
    10fc:	2a e0       	ldi	r18, 0x0A	; 10
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	25 c0       	rjmp	.+74     	; 0x114c <vfprintf+0x260>
    1102:	f2 2f       	mov	r31, r18
    1104:	f9 7f       	andi	r31, 0xF9	; 249
    1106:	bf 2e       	mov	r11, r31
    1108:	8f 36       	cpi	r24, 0x6F	; 111
    110a:	c1 f0       	breq	.+48     	; 0x113c <vfprintf+0x250>
    110c:	18 f4       	brcc	.+6      	; 0x1114 <vfprintf+0x228>
    110e:	88 35       	cpi	r24, 0x58	; 88
    1110:	79 f0       	breq	.+30     	; 0x1130 <vfprintf+0x244>
    1112:	b4 c0       	rjmp	.+360    	; 0x127c <vfprintf+0x390>
    1114:	80 37       	cpi	r24, 0x70	; 112
    1116:	19 f0       	breq	.+6      	; 0x111e <vfprintf+0x232>
    1118:	88 37       	cpi	r24, 0x78	; 120
    111a:	21 f0       	breq	.+8      	; 0x1124 <vfprintf+0x238>
    111c:	af c0       	rjmp	.+350    	; 0x127c <vfprintf+0x390>
    111e:	2f 2f       	mov	r18, r31
    1120:	20 61       	ori	r18, 0x10	; 16
    1122:	b2 2e       	mov	r11, r18
    1124:	b4 fe       	sbrs	r11, 4
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <vfprintf+0x256>
    1128:	8b 2d       	mov	r24, r11
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	b8 2e       	mov	r11, r24
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <vfprintf+0x256>
    1130:	24 ff       	sbrs	r18, 4
    1132:	0a c0       	rjmp	.+20     	; 0x1148 <vfprintf+0x25c>
    1134:	9f 2f       	mov	r25, r31
    1136:	96 60       	ori	r25, 0x06	; 6
    1138:	b9 2e       	mov	r11, r25
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <vfprintf+0x25c>
    113c:	28 e0       	ldi	r18, 0x08	; 8
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	05 c0       	rjmp	.+10     	; 0x114c <vfprintf+0x260>
    1142:	20 e1       	ldi	r18, 0x10	; 16
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x260>
    1148:	20 e1       	ldi	r18, 0x10	; 16
    114a:	32 e0       	ldi	r19, 0x02	; 2
    114c:	f8 01       	movw	r30, r16
    114e:	b7 fe       	sbrs	r11, 7
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <vfprintf+0x274>
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	0c 5f       	subi	r16, 0xFC	; 252
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	06 c0       	rjmp	.+12     	; 0x116c <vfprintf+0x280>
    1160:	60 81       	ld	r22, Z
    1162:	71 81       	ldd	r23, Z+1	; 0x01
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 5f       	subi	r16, 0xFE	; 254
    116a:	1f 4f       	sbci	r17, 0xFF	; 255
    116c:	a4 01       	movw	r20, r8
    116e:	0e 94 96 09 	call	0x132c	; 0x132c <__ultoa_invert>
    1172:	a8 2e       	mov	r10, r24
    1174:	a8 18       	sub	r10, r8
    1176:	fb 2d       	mov	r31, r11
    1178:	ff 77       	andi	r31, 0x7F	; 127
    117a:	7f 2e       	mov	r7, r31
    117c:	76 fe       	sbrs	r7, 6
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <vfprintf+0x2aa>
    1180:	37 2d       	mov	r19, r7
    1182:	3e 7f       	andi	r19, 0xFE	; 254
    1184:	a5 14       	cp	r10, r5
    1186:	50 f4       	brcc	.+20     	; 0x119c <vfprintf+0x2b0>
    1188:	74 fe       	sbrs	r7, 4
    118a:	0a c0       	rjmp	.+20     	; 0x11a0 <vfprintf+0x2b4>
    118c:	72 fc       	sbrc	r7, 2
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <vfprintf+0x2b4>
    1190:	37 2d       	mov	r19, r7
    1192:	3e 7e       	andi	r19, 0xEE	; 238
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <vfprintf+0x2b4>
    1196:	ba 2c       	mov	r11, r10
    1198:	37 2d       	mov	r19, r7
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <vfprintf+0x2b6>
    119c:	ba 2c       	mov	r11, r10
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <vfprintf+0x2b6>
    11a0:	b5 2c       	mov	r11, r5
    11a2:	34 ff       	sbrs	r19, 4
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <vfprintf+0x2d4>
    11a6:	fe 01       	movw	r30, r28
    11a8:	ea 0d       	add	r30, r10
    11aa:	f1 1d       	adc	r31, r1
    11ac:	80 81       	ld	r24, Z
    11ae:	80 33       	cpi	r24, 0x30	; 48
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <vfprintf+0x2ca>
    11b2:	39 7e       	andi	r19, 0xE9	; 233
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <vfprintf+0x2dc>
    11b6:	32 ff       	sbrs	r19, 2
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0x2da>
    11ba:	b3 94       	inc	r11
    11bc:	b3 94       	inc	r11
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <vfprintf+0x2dc>
    11c0:	83 2f       	mov	r24, r19
    11c2:	86 78       	andi	r24, 0x86	; 134
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <vfprintf+0x2dc>
    11c6:	b3 94       	inc	r11
    11c8:	33 fd       	sbrc	r19, 3
    11ca:	13 c0       	rjmp	.+38     	; 0x11f2 <vfprintf+0x306>
    11cc:	30 ff       	sbrs	r19, 0
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <vfprintf+0x2f0>
    11d0:	5a 2c       	mov	r5, r10
    11d2:	b3 14       	cp	r11, r3
    11d4:	18 f4       	brcc	.+6      	; 0x11dc <vfprintf+0x2f0>
    11d6:	53 0c       	add	r5, r3
    11d8:	5b 18       	sub	r5, r11
    11da:	b3 2c       	mov	r11, r3
    11dc:	b3 14       	cp	r11, r3
    11de:	68 f4       	brcc	.+26     	; 0x11fa <vfprintf+0x30e>
    11e0:	b7 01       	movw	r22, r14
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	3c 87       	std	Y+12, r19	; 0x0c
    11e8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    11ec:	b3 94       	inc	r11
    11ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    11f0:	f5 cf       	rjmp	.-22     	; 0x11dc <vfprintf+0x2f0>
    11f2:	b3 14       	cp	r11, r3
    11f4:	10 f4       	brcc	.+4      	; 0x11fa <vfprintf+0x30e>
    11f6:	3b 18       	sub	r3, r11
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <vfprintf+0x310>
    11fa:	31 2c       	mov	r3, r1
    11fc:	34 ff       	sbrs	r19, 4
    11fe:	12 c0       	rjmp	.+36     	; 0x1224 <vfprintf+0x338>
    1200:	b7 01       	movw	r22, r14
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	3c 87       	std	Y+12, r19	; 0x0c
    1208:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    120c:	3c 85       	ldd	r19, Y+12	; 0x0c
    120e:	32 ff       	sbrs	r19, 2
    1210:	17 c0       	rjmp	.+46     	; 0x1240 <vfprintf+0x354>
    1212:	31 fd       	sbrc	r19, 1
    1214:	03 c0       	rjmp	.+6      	; 0x121c <vfprintf+0x330>
    1216:	88 e7       	ldi	r24, 0x78	; 120
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <vfprintf+0x334>
    121c:	88 e5       	ldi	r24, 0x58	; 88
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	b7 01       	movw	r22, r14
    1222:	0c c0       	rjmp	.+24     	; 0x123c <vfprintf+0x350>
    1224:	83 2f       	mov	r24, r19
    1226:	86 78       	andi	r24, 0x86	; 134
    1228:	59 f0       	breq	.+22     	; 0x1240 <vfprintf+0x354>
    122a:	31 ff       	sbrs	r19, 1
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <vfprintf+0x346>
    122e:	8b e2       	ldi	r24, 0x2B	; 43
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <vfprintf+0x348>
    1232:	80 e2       	ldi	r24, 0x20	; 32
    1234:	37 fd       	sbrc	r19, 7
    1236:	8d e2       	ldi	r24, 0x2D	; 45
    1238:	b7 01       	movw	r22, r14
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1240:	a5 14       	cp	r10, r5
    1242:	38 f4       	brcc	.+14     	; 0x1252 <vfprintf+0x366>
    1244:	b7 01       	movw	r22, r14
    1246:	80 e3       	ldi	r24, 0x30	; 48
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    124e:	5a 94       	dec	r5
    1250:	f7 cf       	rjmp	.-18     	; 0x1240 <vfprintf+0x354>
    1252:	aa 94       	dec	r10
    1254:	f4 01       	movw	r30, r8
    1256:	ea 0d       	add	r30, r10
    1258:	f1 1d       	adc	r31, r1
    125a:	80 81       	ld	r24, Z
    125c:	b7 01       	movw	r22, r14
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1264:	a1 10       	cpse	r10, r1
    1266:	f5 cf       	rjmp	.-22     	; 0x1252 <vfprintf+0x366>
    1268:	33 20       	and	r3, r3
    126a:	09 f4       	brne	.+2      	; 0x126e <vfprintf+0x382>
    126c:	51 ce       	rjmp	.-862    	; 0xf10 <vfprintf+0x24>
    126e:	b7 01       	movw	r22, r14
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1278:	3a 94       	dec	r3
    127a:	f6 cf       	rjmp	.-20     	; 0x1268 <vfprintf+0x37c>
    127c:	f7 01       	movw	r30, r14
    127e:	86 81       	ldd	r24, Z+6	; 0x06
    1280:	97 81       	ldd	r25, Z+7	; 0x07
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <vfprintf+0x39c>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	9f ef       	ldi	r25, 0xFF	; 255
    1288:	2c 96       	adiw	r28, 0x0c	; 12
    128a:	e2 e1       	ldi	r30, 0x12	; 18
    128c:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__epilogue_restores__>

00001290 <strnlen_P>:
    1290:	fc 01       	movw	r30, r24
    1292:	05 90       	lpm	r0, Z+
    1294:	61 50       	subi	r22, 0x01	; 1
    1296:	70 40       	sbci	r23, 0x00	; 0
    1298:	01 10       	cpse	r0, r1
    129a:	d8 f7       	brcc	.-10     	; 0x1292 <strnlen_P+0x2>
    129c:	80 95       	com	r24
    129e:	90 95       	com	r25
    12a0:	8e 0f       	add	r24, r30
    12a2:	9f 1f       	adc	r25, r31
    12a4:	08 95       	ret

000012a6 <strnlen>:
    12a6:	fc 01       	movw	r30, r24
    12a8:	61 50       	subi	r22, 0x01	; 1
    12aa:	70 40       	sbci	r23, 0x00	; 0
    12ac:	01 90       	ld	r0, Z+
    12ae:	01 10       	cpse	r0, r1
    12b0:	d8 f7       	brcc	.-10     	; 0x12a8 <strnlen+0x2>
    12b2:	80 95       	com	r24
    12b4:	90 95       	com	r25
    12b6:	8e 0f       	add	r24, r30
    12b8:	9f 1f       	adc	r25, r31
    12ba:	08 95       	ret

000012bc <fputc>:
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	fb 01       	movw	r30, r22
    12c6:	23 81       	ldd	r18, Z+3	; 0x03
    12c8:	21 fd       	sbrc	r18, 1
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <fputc+0x16>
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	9f ef       	ldi	r25, 0xFF	; 255
    12d0:	28 c0       	rjmp	.+80     	; 0x1322 <fputc+0x66>
    12d2:	22 ff       	sbrs	r18, 2
    12d4:	16 c0       	rjmp	.+44     	; 0x1302 <fputc+0x46>
    12d6:	46 81       	ldd	r20, Z+6	; 0x06
    12d8:	57 81       	ldd	r21, Z+7	; 0x07
    12da:	24 81       	ldd	r18, Z+4	; 0x04
    12dc:	35 81       	ldd	r19, Z+5	; 0x05
    12de:	42 17       	cp	r20, r18
    12e0:	53 07       	cpc	r21, r19
    12e2:	44 f4       	brge	.+16     	; 0x12f4 <fputc+0x38>
    12e4:	a0 81       	ld	r26, Z
    12e6:	b1 81       	ldd	r27, Z+1	; 0x01
    12e8:	9d 01       	movw	r18, r26
    12ea:	2f 5f       	subi	r18, 0xFF	; 255
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	31 83       	std	Z+1, r19	; 0x01
    12f0:	20 83       	st	Z, r18
    12f2:	8c 93       	st	X, r24
    12f4:	26 81       	ldd	r18, Z+6	; 0x06
    12f6:	37 81       	ldd	r19, Z+7	; 0x07
    12f8:	2f 5f       	subi	r18, 0xFF	; 255
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	37 83       	std	Z+7, r19	; 0x07
    12fe:	26 83       	std	Z+6, r18	; 0x06
    1300:	10 c0       	rjmp	.+32     	; 0x1322 <fputc+0x66>
    1302:	eb 01       	movw	r28, r22
    1304:	09 2f       	mov	r16, r25
    1306:	18 2f       	mov	r17, r24
    1308:	00 84       	ldd	r0, Z+8	; 0x08
    130a:	f1 85       	ldd	r31, Z+9	; 0x09
    130c:	e0 2d       	mov	r30, r0
    130e:	09 95       	icall
    1310:	89 2b       	or	r24, r25
    1312:	e1 f6       	brne	.-72     	; 0x12cc <fputc+0x10>
    1314:	8e 81       	ldd	r24, Y+6	; 0x06
    1316:	9f 81       	ldd	r25, Y+7	; 0x07
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	9f 83       	std	Y+7, r25	; 0x07
    131c:	8e 83       	std	Y+6, r24	; 0x06
    131e:	81 2f       	mov	r24, r17
    1320:	90 2f       	mov	r25, r16
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <__ultoa_invert>:
    132c:	fa 01       	movw	r30, r20
    132e:	aa 27       	eor	r26, r26
    1330:	28 30       	cpi	r18, 0x08	; 8
    1332:	51 f1       	breq	.+84     	; 0x1388 <__ultoa_invert+0x5c>
    1334:	20 31       	cpi	r18, 0x10	; 16
    1336:	81 f1       	breq	.+96     	; 0x1398 <__ultoa_invert+0x6c>
    1338:	e8 94       	clt
    133a:	6f 93       	push	r22
    133c:	6e 7f       	andi	r22, 0xFE	; 254
    133e:	6e 5f       	subi	r22, 0xFE	; 254
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	8f 4f       	sbci	r24, 0xFF	; 255
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	af 4f       	sbci	r26, 0xFF	; 255
    1348:	b1 e0       	ldi	r27, 0x01	; 1
    134a:	3e d0       	rcall	.+124    	; 0x13c8 <__ultoa_invert+0x9c>
    134c:	b4 e0       	ldi	r27, 0x04	; 4
    134e:	3c d0       	rcall	.+120    	; 0x13c8 <__ultoa_invert+0x9c>
    1350:	67 0f       	add	r22, r23
    1352:	78 1f       	adc	r23, r24
    1354:	89 1f       	adc	r24, r25
    1356:	9a 1f       	adc	r25, r26
    1358:	a1 1d       	adc	r26, r1
    135a:	68 0f       	add	r22, r24
    135c:	79 1f       	adc	r23, r25
    135e:	8a 1f       	adc	r24, r26
    1360:	91 1d       	adc	r25, r1
    1362:	a1 1d       	adc	r26, r1
    1364:	6a 0f       	add	r22, r26
    1366:	71 1d       	adc	r23, r1
    1368:	81 1d       	adc	r24, r1
    136a:	91 1d       	adc	r25, r1
    136c:	a1 1d       	adc	r26, r1
    136e:	20 d0       	rcall	.+64     	; 0x13b0 <__ultoa_invert+0x84>
    1370:	09 f4       	brne	.+2      	; 0x1374 <__ultoa_invert+0x48>
    1372:	68 94       	set
    1374:	3f 91       	pop	r19
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	26 9f       	mul	r18, r22
    137a:	11 24       	eor	r1, r1
    137c:	30 19       	sub	r19, r0
    137e:	30 5d       	subi	r19, 0xD0	; 208
    1380:	31 93       	st	Z+, r19
    1382:	de f6       	brtc	.-74     	; 0x133a <__ultoa_invert+0xe>
    1384:	cf 01       	movw	r24, r30
    1386:	08 95       	ret
    1388:	46 2f       	mov	r20, r22
    138a:	47 70       	andi	r20, 0x07	; 7
    138c:	40 5d       	subi	r20, 0xD0	; 208
    138e:	41 93       	st	Z+, r20
    1390:	b3 e0       	ldi	r27, 0x03	; 3
    1392:	0f d0       	rcall	.+30     	; 0x13b2 <__ultoa_invert+0x86>
    1394:	c9 f7       	brne	.-14     	; 0x1388 <__ultoa_invert+0x5c>
    1396:	f6 cf       	rjmp	.-20     	; 0x1384 <__ultoa_invert+0x58>
    1398:	46 2f       	mov	r20, r22
    139a:	4f 70       	andi	r20, 0x0F	; 15
    139c:	40 5d       	subi	r20, 0xD0	; 208
    139e:	4a 33       	cpi	r20, 0x3A	; 58
    13a0:	18 f0       	brcs	.+6      	; 0x13a8 <__ultoa_invert+0x7c>
    13a2:	49 5d       	subi	r20, 0xD9	; 217
    13a4:	31 fd       	sbrc	r19, 1
    13a6:	40 52       	subi	r20, 0x20	; 32
    13a8:	41 93       	st	Z+, r20
    13aa:	02 d0       	rcall	.+4      	; 0x13b0 <__ultoa_invert+0x84>
    13ac:	a9 f7       	brne	.-22     	; 0x1398 <__ultoa_invert+0x6c>
    13ae:	ea cf       	rjmp	.-44     	; 0x1384 <__ultoa_invert+0x58>
    13b0:	b4 e0       	ldi	r27, 0x04	; 4
    13b2:	a6 95       	lsr	r26
    13b4:	97 95       	ror	r25
    13b6:	87 95       	ror	r24
    13b8:	77 95       	ror	r23
    13ba:	67 95       	ror	r22
    13bc:	ba 95       	dec	r27
    13be:	c9 f7       	brne	.-14     	; 0x13b2 <__ultoa_invert+0x86>
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	61 05       	cpc	r22, r1
    13c4:	71 05       	cpc	r23, r1
    13c6:	08 95       	ret
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
    13cc:	0a 2e       	mov	r0, r26
    13ce:	06 94       	lsr	r0
    13d0:	57 95       	ror	r21
    13d2:	47 95       	ror	r20
    13d4:	37 95       	ror	r19
    13d6:	27 95       	ror	r18
    13d8:	ba 95       	dec	r27
    13da:	c9 f7       	brne	.-14     	; 0x13ce <__ultoa_invert+0xa2>
    13dc:	62 0f       	add	r22, r18
    13de:	73 1f       	adc	r23, r19
    13e0:	84 1f       	adc	r24, r20
    13e2:	95 1f       	adc	r25, r21
    13e4:	a0 1d       	adc	r26, r0
    13e6:	08 95       	ret

000013e8 <__prologue_saves__>:
    13e8:	2f 92       	push	r2
    13ea:	3f 92       	push	r3
    13ec:	4f 92       	push	r4
    13ee:	5f 92       	push	r5
    13f0:	6f 92       	push	r6
    13f2:	7f 92       	push	r7
    13f4:	8f 92       	push	r8
    13f6:	9f 92       	push	r9
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	ca 1b       	sub	r28, r26
    1412:	db 0b       	sbc	r29, r27
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	09 94       	ijmp

00001420 <__epilogue_restores__>:
    1420:	2a 88       	ldd	r2, Y+18	; 0x12
    1422:	39 88       	ldd	r3, Y+17	; 0x11
    1424:	48 88       	ldd	r4, Y+16	; 0x10
    1426:	5f 84       	ldd	r5, Y+15	; 0x0f
    1428:	6e 84       	ldd	r6, Y+14	; 0x0e
    142a:	7d 84       	ldd	r7, Y+13	; 0x0d
    142c:	8c 84       	ldd	r8, Y+12	; 0x0c
    142e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1430:	aa 84       	ldd	r10, Y+10	; 0x0a
    1432:	b9 84       	ldd	r11, Y+9	; 0x09
    1434:	c8 84       	ldd	r12, Y+8	; 0x08
    1436:	df 80       	ldd	r13, Y+7	; 0x07
    1438:	ee 80       	ldd	r14, Y+6	; 0x06
    143a:	fd 80       	ldd	r15, Y+5	; 0x05
    143c:	0c 81       	ldd	r16, Y+4	; 0x04
    143e:	1b 81       	ldd	r17, Y+3	; 0x03
    1440:	aa 81       	ldd	r26, Y+2	; 0x02
    1442:	b9 81       	ldd	r27, Y+1	; 0x01
    1444:	ce 0f       	add	r28, r30
    1446:	d1 1d       	adc	r29, r1
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	ed 01       	movw	r28, r26
    1454:	08 95       	ret

00001456 <_exit>:
    1456:	f8 94       	cli

00001458 <__stop_program>:
    1458:	ff cf       	rjmp	.-2      	; 0x1458 <__stop_program>
